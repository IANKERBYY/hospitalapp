{"ast":null,"code":"import{PermissionStatus,createPermissionHook,UnavailabilityError}from'expo-modules-core';import*as React from'react';import Platform from\"react-native-web/dist/exports/Platform\";import ExpoBarCodeScannerModule from'./ExpoBarCodeScannerModule';import ExpoBarCodeScannerView from'./ExpoBarCodeScannerView';import{jsx as _jsx}from\"react/jsx-runtime\";const{BarCodeType,Type}=ExpoBarCodeScannerModule;const EVENT_THROTTLE_MS=500;let warnedAboutDeprecation=false;export class BarCodeScanner extends React.Component{lastEvents={};lastEventsTimes={};static Constants={BarCodeType,Type};static ConversionTables={type:Type};static defaultProps={type:Type.back,barCodeTypes:Object.values(BarCodeType)};componentDidMount(){if(!warnedAboutDeprecation){console.warn('BarCodeScanner has been deprecated and will be removed in a future SDK version. Please use `expo-camera` instead. See https://expo.fyi/barcode-scanner-to-expo-camera for more details on how to migrate');warnedAboutDeprecation=true;}}static async getPermissionsAsync(){return ExpoBarCodeScannerModule.getPermissionsAsync();}static async requestPermissionsAsync(){return ExpoBarCodeScannerModule.requestPermissionsAsync();}static usePermissions=createPermissionHook({getMethod:BarCodeScanner.getPermissionsAsync,requestMethod:BarCodeScanner.requestPermissionsAsync});static async scanFromURLAsync(url,barCodeTypes=Object.values(BarCodeType)){if(!ExpoBarCodeScannerModule.scanFromURLAsync){throw new UnavailabilityError('expo-barcode-scanner','scanFromURLAsync');}if(Array.isArray(barCodeTypes)&&!barCodeTypes.length){throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');}if(false){if(Array.isArray(barCodeTypes)&&!barCodeTypes.includes(BarCodeType.qr)){throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');}return await ExpoBarCodeScannerModule.scanFromURLAsync(url,[BarCodeType.qr]);}return await ExpoBarCodeScannerModule.scanFromURLAsync(url,barCodeTypes);}render(){const nativeProps=this.convertNativeProps(this.props);const{onBarCodeScanned}=this.props;return _jsx(ExpoBarCodeScannerView,Object.assign({},nativeProps,{onBarCodeScanned:this.onObjectDetected(onBarCodeScanned)}));}onObjectDetected=callback=>({nativeEvent})=>{const{type}=nativeEvent;if(this.lastEvents[type]&&this.lastEventsTimes[type]&&JSON.stringify(nativeEvent)===this.lastEvents[type]&&Date.now()-this.lastEventsTimes[type]<EVENT_THROTTLE_MS){return;}if(callback){callback(nativeEvent);this.lastEventsTimes[type]=new Date();this.lastEvents[type]=JSON.stringify(nativeEvent);}};convertNativeProps(props){const nativeProps={};for(const[key,value]of Object.entries(props)){if(typeof value==='string'&&BarCodeScanner.ConversionTables[key]){nativeProps[key]=BarCodeScanner.ConversionTables[key][value];}else{nativeProps[key]=value;}}return nativeProps;}}export{PermissionStatus};export const{Constants,getPermissionsAsync,requestPermissionsAsync,scanFromURLAsync}=BarCodeScanner;","map":{"version":3,"names":["PermissionStatus","createPermissionHook","UnavailabilityError","React","Platform","ExpoBarCodeScannerModule","ExpoBarCodeScannerView","jsx","_jsx","BarCodeType","Type","EVENT_THROTTLE_MS","warnedAboutDeprecation","BarCodeScanner","Component","lastEvents","lastEventsTimes","Constants","ConversionTables","type","defaultProps","back","barCodeTypes","Object","values","componentDidMount","console","warn","getPermissionsAsync","requestPermissionsAsync","usePermissions","getMethod","requestMethod","scanFromURLAsync","url","Array","isArray","length","Error","includes","qr","render","nativeProps","convertNativeProps","props","onBarCodeScanned","assign","onObjectDetected","callback","nativeEvent","JSON","stringify","Date","now","key","value","entries"],"sources":["C:\\Users\\pablo\\HospitalApp\\node_modules\\expo-barcode-scanner\\src\\BarCodeScanner.tsx"],"sourcesContent":["import {\n  PermissionResponse,\n  PermissionStatus,\n  PermissionHookOptions,\n  createPermissionHook,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport * as React from 'react';\nimport { Platform, ViewProps } from 'react-native';\n\nimport ExpoBarCodeScannerModule from './ExpoBarCodeScannerModule';\nimport ExpoBarCodeScannerView from './ExpoBarCodeScannerView';\n\nconst { BarCodeType, Type } = ExpoBarCodeScannerModule;\n\nconst EVENT_THROTTLE_MS = 500;\n\nlet warnedAboutDeprecation = false;\n\n// @needsAudit\n/**\n * Those coordinates are represented in the coordinate space of the barcode source (e.g. when you\n * are using the barcode scanner view, these values are adjusted to the dimensions of the view).\n */\nexport type BarCodePoint = {\n  /**\n   * The `x` coordinate value.\n   */\n  x: number;\n  /**\n   * The `y` coordinate value.\n   */\n  y: number;\n};\n\n// @needsAudit\nexport type BarCodeSize = {\n  /**\n   * The height value.\n   */\n  height: number;\n  /**\n   * The width value.\n   */\n  width: number;\n};\n\n// @needsAudit\nexport type BarCodeBounds = {\n  /**\n   * The origin point of the bounding box.\n   */\n  origin: BarCodePoint;\n  /**\n   * The size of the bounding box.\n   */\n  size: BarCodeSize;\n};\n\n// @needsAudit\nexport type BarCodeScannerResult = {\n  /**\n   * The barcode type.\n   */\n  type: string;\n  /**\n   * The parsed information encoded in the bar code.\n   */\n  data: string;\n  /**\n   * The raw information encoded in the bar code.\n   * May be different from `data` depending on the barcode type.\n   * @platform android\n   * @hidden\n   */\n  raw?: string;\n  /**\n   * The [BarCodeBounds](#barcodebounds) object.\n   * `bounds` in some case will be representing an empty rectangle.\n   * Moreover, `bounds` doesn't have to bound the whole barcode.\n   * For some types, they will represent the area used by the scanner.\n   */\n  bounds: BarCodeBounds;\n  /**\n   * Corner points of the bounding box.\n   * `cornerPoints` is not always available and may be empty. On iOS, for `code39` and `pdf417`\n   * you don't get this value.\n   */\n  cornerPoints: BarCodePoint[];\n};\n\n// @docsMissing\nexport type BarCodeEvent = BarCodeScannerResult & {\n  target?: number;\n};\n\n// @docsMissing\nexport type BarCodeEventCallbackArguments = {\n  nativeEvent: BarCodeEvent;\n};\n\n// @docsMissing\nexport type BarCodeScannedCallback = (params: BarCodeEvent) => void;\n\n// @needsAudit\nexport type BarCodeScannerProps = ViewProps & {\n  /**\n   * Camera facing. Use one of `BarCodeScanner.Constants.Type`. Use either `Type.front` or `Type.back`.\n   * Same as `Camera.Constants.Type`.\n   * @default Type.back\n   */\n  type?: 'front' | 'back' | number;\n  /**\n   * An array of bar code types. Usage: `BarCodeScanner.Constants.BarCodeType.<codeType>` where\n   * `codeType` is one of these [listed above](#supported-formats). Defaults to all supported bar\n   * code types. It is recommended to provide only the bar code formats you expect to scan to\n   * minimize battery usage.\n   *\n   * For example: `barCodeTypes={[BarCodeScanner.Constants.BarCodeType.qr]}`.\n   */\n  barCodeTypes?: string[];\n  /**\n   * A callback that is invoked when a bar code has been successfully scanned. The callback is\n   * provided with an [BarCodeScannerResult](#barcodescannerresult).\n   * > __Note:__ Passing `undefined` to the `onBarCodeScanned` prop will result in no scanning. This\n   * > can be used to effectively \"pause\" the scanner so that it doesn't continually scan even after\n   * > data has been retrieved.\n   */\n  onBarCodeScanned?: BarCodeScannedCallback;\n};\n\n/**\n * @deprecated\n * BarCodeScanner has been deprecated and will be removed in a future SDK version. Use `expo-camera` instead.\n * See [How to migrate from `expo-barcode-scanner` to `expo-camera`](https://expo.fyi/barcode-scanner-to-expo-camera)\n * for more details.\n */\nexport class BarCodeScanner extends React.Component<BarCodeScannerProps> {\n  lastEvents: { [key: string]: any } = {};\n  lastEventsTimes: { [key: string]: any } = {};\n\n  static Constants = {\n    BarCodeType,\n    Type,\n  };\n\n  static ConversionTables = {\n    type: Type,\n  };\n\n  static defaultProps = {\n    type: Type.back,\n    barCodeTypes: Object.values(BarCodeType),\n  };\n\n  componentDidMount(): void {\n    if (!warnedAboutDeprecation) {\n      console.warn(\n        'BarCodeScanner has been deprecated and will be removed in a future SDK version. Please use `expo-camera` instead. See https://expo.fyi/barcode-scanner-to-expo-camera for more details on how to migrate'\n      );\n      warnedAboutDeprecation = true;\n    }\n  }\n\n  // @needsAudit\n  /**\n   * Checks user's permissions for accessing the camera.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async getPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.getPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Asks the user to grant permissions for accessing the camera.\n   *\n   * On iOS this will require apps to specify the `NSCameraUsageDescription` entry in the `Info.plist`.\n   * @return Return a promise that fulfills to an object of type [`PermissionResponse`](#permissionresponse).\n   */\n  static async requestPermissionsAsync(): Promise<PermissionResponse> {\n    return ExpoBarCodeScannerModule.requestPermissionsAsync();\n  }\n\n  // @needsAudit\n  /**\n   * Check or request permissions for the barcode scanner.\n   * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n   *\n   * @example\n   * ```ts\n   * const [permissionResponse, requestPermission] = BarCodeScanner.usePermissions();\n   * ```\n   */\n  static usePermissions = createPermissionHook({\n    getMethod: BarCodeScanner.getPermissionsAsync,\n    requestMethod: BarCodeScanner.requestPermissionsAsync,\n  });\n\n  // @needsAudit\n  /**\n   * Scan bar codes from the image given by the URL.\n   * @param url URL to get the image from.\n   * @param barCodeTypes An array of bar code types. Defaults to all supported bar code types on\n   * the platform.\n   * > __Note:__ Only QR codes are supported on iOS.\n   * @return A possibly empty array of objects of the `BarCodeScannerResult` shape, where the type\n   * refers to the bar code type that was scanned and the data is the information encoded in the bar\n   * code.\n   */\n  static async scanFromURLAsync(\n    url: string,\n    barCodeTypes: string[] = Object.values(BarCodeType)\n  ): Promise<BarCodeScannerResult[]> {\n    if (!ExpoBarCodeScannerModule.scanFromURLAsync) {\n      throw new UnavailabilityError('expo-barcode-scanner', 'scanFromURLAsync');\n    }\n    if (Array.isArray(barCodeTypes) && !barCodeTypes.length) {\n      throw new Error('No barCodeTypes specified; provide at least one barCodeType for scanner');\n    }\n\n    if (Platform.OS === 'ios') {\n      if (Array.isArray(barCodeTypes) && !barCodeTypes.includes(BarCodeType.qr)) {\n        // Only QR type is supported on iOS, fail if one tries to use other types\n        throw new Error('Only QR type is supported by scanFromURLAsync() on iOS');\n      }\n      // on iOS use only supported QR type\n      return await ExpoBarCodeScannerModule.scanFromURLAsync(url, [BarCodeType.qr]);\n    }\n\n    // On other platforms, if barCodeTypes is not provided, use all available types\n    return await ExpoBarCodeScannerModule.scanFromURLAsync(url, barCodeTypes);\n  }\n\n  render() {\n    const nativeProps = this.convertNativeProps(this.props);\n    const { onBarCodeScanned } = this.props;\n    return (\n      <ExpoBarCodeScannerView\n        {...nativeProps}\n        onBarCodeScanned={this.onObjectDetected(onBarCodeScanned)}\n      />\n    );\n  }\n\n  /**\n   * @hidden\n   */\n  onObjectDetected =\n    (callback?: BarCodeScannedCallback) =>\n    ({ nativeEvent }: BarCodeEventCallbackArguments) => {\n      const { type } = nativeEvent;\n      if (\n        this.lastEvents[type] &&\n        this.lastEventsTimes[type] &&\n        JSON.stringify(nativeEvent) === this.lastEvents[type] &&\n        Date.now() - this.lastEventsTimes[type] < EVENT_THROTTLE_MS\n      ) {\n        return;\n      }\n\n      if (callback) {\n        callback(nativeEvent);\n        this.lastEventsTimes[type] = new Date();\n        this.lastEvents[type] = JSON.stringify(nativeEvent);\n      }\n    };\n\n  /**\n   * @hidden\n   */\n  convertNativeProps(props: BarCodeScannerProps) {\n    const nativeProps: BarCodeScannerProps = {};\n\n    for (const [key, value] of Object.entries(props)) {\n      if (typeof value === 'string' && BarCodeScanner.ConversionTables[key]) {\n        nativeProps[key] = BarCodeScanner.ConversionTables[key][value];\n      } else {\n        nativeProps[key] = value;\n      }\n    }\n\n    return nativeProps;\n  }\n}\n\nexport { PermissionResponse, PermissionStatus, PermissionHookOptions };\nexport const { Constants, getPermissionsAsync, requestPermissionsAsync, scanFromURLAsync } =\n  BarCodeScanner;\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}