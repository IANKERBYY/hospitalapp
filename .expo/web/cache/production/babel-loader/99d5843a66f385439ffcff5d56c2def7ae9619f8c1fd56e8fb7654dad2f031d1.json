{"ast":null,"code":"import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"testOnly_pressed\",\"hitSlop\",\"pressRetentionOffset\",\"delayHoverIn\",\"onHoverIn\",\"delayHoverOut\",\"onHoverOut\",\"delayLongPress\",\"unstable_pressDelay\",\"onPress\",\"onPressIn\",\"onPressOut\",\"onLongPress\",\"style\",\"children\",\"android_disableSound\",\"android_ripple\",\"disabled\",\"accessible\"];function _extends(){_extends=Object.assign||function(target){for(var i=1;i<arguments.length;i++){var source=arguments[i];for(var key in source){if(Object.prototype.hasOwnProperty.call(source,key)){target[key]=source[key];}}}return target;};return _extends.apply(this,arguments);}import React,{forwardRef,useCallback,useMemo,useRef,useState}from'react';import{GestureObjects as Gesture}from'../../handlers/gestures/gestureObjects';import{GestureDetector}from'../../handlers/gestures/GestureDetector';import Platform from\"react-native-web/dist/exports/Platform\";import processColor from\"react-native-web/dist/exports/processColor\";import NativeButton from'../GestureHandlerButton';import{numberAsInset,gestureToPressableEvent,isTouchWithinInset,gestureTouchToPressableEvent,addInsets}from'./utils';import{PressabilityDebugView}from'../../handlers/PressabilityDebugView';import{INT32_MAX,isFabric,isTestEnv}from'../../utils';const DEFAULT_LONG_PRESS_DURATION=500;const IS_TEST_ENV=isTestEnv();let IS_FABRIC=null;const Pressable=forwardRef((props,pressableRef)=>{var _android_ripple$radiu;const{testOnly_pressed,hitSlop,pressRetentionOffset,delayHoverIn,onHoverIn,delayHoverOut,onHoverOut,delayLongPress,unstable_pressDelay,onPress,onPressIn,onPressOut,onLongPress,style,children,android_disableSound,android_ripple,disabled,accessible}=props,remainingProps=_objectWithoutPropertiesLoose(props,_excluded);const[pressedState,setPressedState]=useState(testOnly_pressed!==null&&testOnly_pressed!==void 0?testOnly_pressed:false);const isPressCallbackEnabled=useRef(true);const hasPassedBoundsChecks=useRef(false);const shouldPreventNativeEffects=useRef(false);const normalizedHitSlop=useMemo(()=>typeof hitSlop==='number'?numberAsInset(hitSlop):hitSlop!==null&&hitSlop!==void 0?hitSlop:{},[hitSlop]);const normalizedPressRetentionOffset=useMemo(()=>typeof pressRetentionOffset==='number'?numberAsInset(pressRetentionOffset):pressRetentionOffset!==null&&pressRetentionOffset!==void 0?pressRetentionOffset:{},[pressRetentionOffset]);const hoverInTimeout=useRef(null);const hoverOutTimeout=useRef(null);const hoverGesture=useMemo(()=>Gesture.Hover().manualActivation(true).cancelsTouchesInView(false).onBegin(event=>{if(hoverOutTimeout.current){clearTimeout(hoverOutTimeout.current);}if(delayHoverIn){hoverInTimeout.current=setTimeout(()=>onHoverIn===null||onHoverIn===void 0?void 0:onHoverIn(gestureToPressableEvent(event)),delayHoverIn);return;}onHoverIn===null||onHoverIn===void 0?void 0:onHoverIn(gestureToPressableEvent(event));}).onFinalize(event=>{if(hoverInTimeout.current){clearTimeout(hoverInTimeout.current);}if(delayHoverOut){hoverOutTimeout.current=setTimeout(()=>onHoverOut===null||onHoverOut===void 0?void 0:onHoverOut(gestureToPressableEvent(event)),delayHoverOut);return;}onHoverOut===null||onHoverOut===void 0?void 0:onHoverOut(gestureToPressableEvent(event));}),[delayHoverIn,delayHoverOut,onHoverIn,onHoverOut]);const pressDelayTimeoutRef=useRef(null);const isTouchPropagationAllowed=useRef(false);const deferredEventPayload=useRef(null);const pressInHandler=useCallback(event=>{if(handlingOnTouchesDown.current){deferredEventPayload.current=event;}if(!isTouchPropagationAllowed.current){return;}deferredEventPayload.current=null;onPressIn===null||onPressIn===void 0?void 0:onPressIn(event);isPressCallbackEnabled.current=true;pressDelayTimeoutRef.current=null;setPressedState(true);},[onPressIn]);const pressOutHandler=useCallback(event=>{if(!isTouchPropagationAllowed.current){hasPassedBoundsChecks.current=false;isPressCallbackEnabled.current=true;deferredEventPayload.current=null;if(longPressTimeoutRef.current){clearTimeout(longPressTimeoutRef.current);longPressTimeoutRef.current=null;}if(pressDelayTimeoutRef.current){clearTimeout(pressDelayTimeoutRef.current);pressDelayTimeoutRef.current=null;}return;}if(!hasPassedBoundsChecks.current||event.nativeEvent.touches.length>event.nativeEvent.changedTouches.length){return;}if(unstable_pressDelay&&pressDelayTimeoutRef.current!==null){clearTimeout(pressDelayTimeoutRef.current);pressInHandler(event);}if(deferredEventPayload.current){onPressIn===null||onPressIn===void 0?void 0:onPressIn(deferredEventPayload.current);deferredEventPayload.current=null;}onPressOut===null||onPressOut===void 0?void 0:onPressOut(event);if(isPressCallbackEnabled.current){onPress===null||onPress===void 0?void 0:onPress(event);}if(longPressTimeoutRef.current){clearTimeout(longPressTimeoutRef.current);longPressTimeoutRef.current=null;}isTouchPropagationAllowed.current=false;hasPassedBoundsChecks.current=false;isPressCallbackEnabled.current=true;setPressedState(false);},[onPress,onPressIn,onPressOut,pressInHandler,unstable_pressDelay]);const handlingOnTouchesDown=useRef(false);const onEndHandlingTouchesDown=useRef(null);const cancelledMidPress=useRef(false);const activateLongPress=useCallback(event=>{if(!isTouchPropagationAllowed.current){return;}if(hasPassedBoundsChecks.current){onLongPress===null||onLongPress===void 0?void 0:onLongPress(gestureTouchToPressableEvent(event));isPressCallbackEnabled.current=false;}if(longPressTimeoutRef.current){clearTimeout(longPressTimeoutRef.current);longPressTimeoutRef.current=null;}},[onLongPress]);const longPressTimeoutRef=useRef(null);const longPressMinDuration=(delayLongPress!==null&&delayLongPress!==void 0?delayLongPress:DEFAULT_LONG_PRESS_DURATION)+(unstable_pressDelay!==null&&unstable_pressDelay!==void 0?unstable_pressDelay:0);const innerPressableRef=useRef(null);const measureCallback=useCallback((width,height,event)=>{var _onEndHandlingTouches;if(!isTouchWithinInset({width,height},normalizedHitSlop,event.changedTouches.at(-1))||hasPassedBoundsChecks.current||cancelledMidPress.current){cancelledMidPress.current=false;onEndHandlingTouchesDown.current=null;handlingOnTouchesDown.current=false;return;}hasPassedBoundsChecks.current=true;if(longPressTimeoutRef.current===null){longPressTimeoutRef.current=setTimeout(()=>activateLongPress(event),longPressMinDuration);}if(unstable_pressDelay){pressDelayTimeoutRef.current=setTimeout(()=>{pressInHandler(gestureTouchToPressableEvent(event));},unstable_pressDelay);}else{pressInHandler(gestureTouchToPressableEvent(event));}(_onEndHandlingTouches=onEndHandlingTouchesDown.current)===null||_onEndHandlingTouches===void 0?void 0:_onEndHandlingTouches.call(onEndHandlingTouchesDown);onEndHandlingTouchesDown.current=null;handlingOnTouchesDown.current=false;},[activateLongPress,longPressMinDuration,normalizedHitSlop,pressInHandler,unstable_pressDelay]);const pressAndTouchGesture=useMemo(()=>Gesture.LongPress().minDuration(INT32_MAX).maxDistance(INT32_MAX).cancelsTouchesInView(false).onTouchesDown(event=>{handlingOnTouchesDown.current=true;if(pressableRef){var _current;(_current=pressableRef.current)===null||_current===void 0?void 0:_current.measure((_x,_y,width,height)=>{measureCallback(width,height,event);});}else{var _innerPressableRef$cu;(_innerPressableRef$cu=innerPressableRef.current)===null||_innerPressableRef$cu===void 0?void 0:_innerPressableRef$cu.measure((_x,_y,width,height)=>{measureCallback(width,height,event);});}}).onTouchesUp(event=>{if(handlingOnTouchesDown.current){onEndHandlingTouchesDown.current=()=>pressOutHandler(gestureTouchToPressableEvent(event));return;}if(deferredEventPayload.current!==null){shouldPreventNativeEffects.current=true;}pressOutHandler(gestureTouchToPressableEvent(event));}).onTouchesCancelled(event=>{isPressCallbackEnabled.current=false;if(handlingOnTouchesDown.current){cancelledMidPress.current=true;onEndHandlingTouchesDown.current=()=>pressOutHandler(gestureTouchToPressableEvent(event));return;}if(!hasPassedBoundsChecks.current||event.allTouches.length>event.changedTouches.length){return;}pressOutHandler(gestureTouchToPressableEvent(event));}),[pressableRef,measureCallback,pressOutHandler]);const buttonGesture=useMemo(()=>Gesture.Native().onBegin(()=>{if(false||false){isTouchPropagationAllowed.current=true;}}).onStart(()=>{if(true){isTouchPropagationAllowed.current=true;}if(true){return;}if(deferredEventPayload.current){isTouchPropagationAllowed.current=true;if(hasPassedBoundsChecks.current){pressInHandler(deferredEventPayload.current);deferredEventPayload.current=null;}else{pressOutHandler(deferredEventPayload.current);isTouchPropagationAllowed.current=false;}return;}if(hasPassedBoundsChecks.current){isTouchPropagationAllowed.current=true;return;}if(shouldPreventNativeEffects.current){shouldPreventNativeEffects.current=false;if(!handlingOnTouchesDown.current){return;}}isTouchPropagationAllowed.current=true;}),[pressInHandler,pressOutHandler]);const appliedHitSlop=addInsets(normalizedHitSlop,normalizedPressRetentionOffset);const isPressableEnabled=disabled!==true;const gestures=[buttonGesture,pressAndTouchGesture,hoverGesture];for(const gesture of gestures){gesture.enabled(isPressableEnabled);gesture.runOnJS(true);gesture.hitSlop(appliedHitSlop);gesture.shouldCancelWhenOutside(true?false:true);}buttonGesture.hitSlop(normalizedHitSlop);const gesture=Gesture.Simultaneous(...gestures);const pointerStyle=true?{cursor:'pointer'}:{};const styleProp=typeof style==='function'?style({pressed:pressedState}):style;const childrenProp=typeof children==='function'?children({pressed:pressedState}):children;const rippleColor=useMemo(()=>{var _android_ripple$color;if(IS_FABRIC===null){IS_FABRIC=isFabric();}const defaultRippleColor=android_ripple?undefined:'transparent';const unprocessedRippleColor=(_android_ripple$color=android_ripple===null||android_ripple===void 0?void 0:android_ripple.color)!==null&&_android_ripple$color!==void 0?_android_ripple$color:defaultRippleColor;return IS_FABRIC?unprocessedRippleColor:processColor(unprocessedRippleColor);},[android_ripple]);return React.createElement(GestureDetector,{gesture:gesture},React.createElement(NativeButton,_extends({},remainingProps,{ref:pressableRef!==null&&pressableRef!==void 0?pressableRef:innerPressableRef,accessible:accessible!==false,hitSlop:appliedHitSlop,enabled:isPressableEnabled,touchSoundDisabled:android_disableSound!==null&&android_disableSound!==void 0?android_disableSound:undefined,rippleColor:rippleColor,rippleRadius:(_android_ripple$radiu=android_ripple===null||android_ripple===void 0?void 0:android_ripple.radius)!==null&&_android_ripple$radiu!==void 0?_android_ripple$radiu:undefined,style:[pointerStyle,styleProp],testOnly_onPress:IS_TEST_ENV?onPress:undefined,testOnly_onPressIn:IS_TEST_ENV?onPressIn:undefined,testOnly_onPressOut:IS_TEST_ENV?onPressOut:undefined,testOnly_onLongPress:IS_TEST_ENV?onLongPress:undefined}),childrenProp,false?React.createElement(PressabilityDebugView,{color:\"red\",hitSlop:normalizedHitSlop}):null));});export default Pressable;","map":{"version":3,"names":["React","forwardRef","useCallback","useMemo","useRef","useState","GestureObjects","Gesture","GestureDetector","Platform","processColor","NativeButton","numberAsInset","gestureToPressableEvent","isTouchWithinInset","gestureTouchToPressableEvent","addInsets","PressabilityDebugView","INT32_MAX","isFabric","isTestEnv","DEFAULT_LONG_PRESS_DURATION","IS_TEST_ENV","IS_FABRIC","Pressable","props","pressableRef","_android_ripple$radiu","testOnly_pressed","hitSlop","pressRetentionOffset","delayHoverIn","onHoverIn","delayHoverOut","onHoverOut","delayLongPress","unstable_pressDelay","onPress","onPressIn","onPressOut","onLongPress","style","children","android_disableSound","android_ripple","disabled","accessible","remainingProps","_objectWithoutPropertiesLoose","_excluded","pressedState","setPressedState","isPressCallbackEnabled","hasPassedBoundsChecks","shouldPreventNativeEffects","normalizedHitSlop","normalizedPressRetentionOffset","hoverInTimeout","hoverOutTimeout","hoverGesture","Hover","manualActivation","cancelsTouchesInView","onBegin","event","current","clearTimeout","setTimeout","onFinalize","pressDelayTimeoutRef","isTouchPropagationAllowed","deferredEventPayload","pressInHandler","handlingOnTouchesDown","pressOutHandler","longPressTimeoutRef","nativeEvent","touches","length","changedTouches","onEndHandlingTouchesDown","cancelledMidPress","activateLongPress","longPressMinDuration","innerPressableRef","measureCallback","width","height","_onEndHandlingTouches","at","call","pressAndTouchGesture","LongPress","minDuration","maxDistance","onTouchesDown","_current","measure","_x","_y","_innerPressableRef$cu","onTouchesUp","onTouchesCancelled","allTouches","buttonGesture","Native","onStart","appliedHitSlop","isPressableEnabled","gestures","gesture","enabled","runOnJS","shouldCancelWhenOutside","Simultaneous","pointerStyle","cursor","styleProp","pressed","childrenProp","rippleColor","_android_ripple$color","defaultRippleColor","undefined","unprocessedRippleColor","color","createElement","_extends","ref","touchSoundDisabled","rippleRadius","radius","testOnly_onPress","testOnly_onPressIn","testOnly_onPressOut","testOnly_onLongPress"],"sources":["C:\\Users\\pablo\\HospitalApp\\node_modules\\react-native-gesture-handler\\lib\\module\\components\\Pressable\\Pressable.tsx"],"sourcesContent":["import React, {\n  ForwardedRef,\n  forwardRef,\n  RefObject,\n  useCallback,\n  useMemo,\n  useRef,\n  useState,\n} from 'react';\nimport { GestureObjects as Gesture } from '../../handlers/gestures/gestureObjects';\nimport { GestureDetector } from '../../handlers/gestures/GestureDetector';\nimport { PressableEvent, PressableProps } from './PressableProps';\nimport {\n  Insets,\n  Platform,\n  StyleProp,\n  View,\n  ViewStyle,\n  processColor,\n} from 'react-native';\nimport NativeButton from '../GestureHandlerButton';\nimport {\n  numberAsInset,\n  gestureToPressableEvent,\n  isTouchWithinInset,\n  gestureTouchToPressableEvent,\n  addInsets,\n} from './utils';\nimport { PressabilityDebugView } from '../../handlers/PressabilityDebugView';\nimport { GestureTouchEvent } from '../../handlers/gestureHandlerCommon';\nimport { INT32_MAX, isFabric, isTestEnv } from '../../utils';\n\nconst DEFAULT_LONG_PRESS_DURATION = 500;\nconst IS_TEST_ENV = isTestEnv();\n\nlet IS_FABRIC: null | boolean = null;\n\nconst Pressable = forwardRef(\n  (props: PressableProps, pressableRef: ForwardedRef<View>) => {\n    const {\n      testOnly_pressed,\n      hitSlop,\n      pressRetentionOffset,\n      delayHoverIn,\n      onHoverIn,\n      delayHoverOut,\n      onHoverOut,\n      delayLongPress,\n      unstable_pressDelay,\n      onPress,\n      onPressIn,\n      onPressOut,\n      onLongPress,\n      style,\n      children,\n      android_disableSound,\n      android_ripple,\n      disabled,\n      accessible,\n      ...remainingProps\n    } = props;\n\n    const [pressedState, setPressedState] = useState(testOnly_pressed ?? false);\n\n    // Disabled when onLongPress has been called\n    const isPressCallbackEnabled = useRef<boolean>(true);\n    const hasPassedBoundsChecks = useRef<boolean>(false);\n    const shouldPreventNativeEffects = useRef<boolean>(false);\n\n    const normalizedHitSlop: Insets = useMemo(\n      () =>\n        typeof hitSlop === 'number' ? numberAsInset(hitSlop) : (hitSlop ?? {}),\n      [hitSlop]\n    );\n\n    const normalizedPressRetentionOffset: Insets = useMemo(\n      () =>\n        typeof pressRetentionOffset === 'number'\n          ? numberAsInset(pressRetentionOffset)\n          : (pressRetentionOffset ?? {}),\n      [pressRetentionOffset]\n    );\n\n    const hoverInTimeout = useRef<number | null>(null);\n    const hoverOutTimeout = useRef<number | null>(null);\n\n    const hoverGesture = useMemo(\n      () =>\n        Gesture.Hover()\n          .manualActivation(true) // Stops Hover from blocking Native gesture activation on web\n          .cancelsTouchesInView(false)\n          .onBegin((event) => {\n            if (hoverOutTimeout.current) {\n              clearTimeout(hoverOutTimeout.current);\n            }\n            if (delayHoverIn) {\n              hoverInTimeout.current = setTimeout(\n                () => onHoverIn?.(gestureToPressableEvent(event)),\n                delayHoverIn\n              );\n              return;\n            }\n            onHoverIn?.(gestureToPressableEvent(event));\n          })\n          .onFinalize((event) => {\n            if (hoverInTimeout.current) {\n              clearTimeout(hoverInTimeout.current);\n            }\n            if (delayHoverOut) {\n              hoverOutTimeout.current = setTimeout(\n                () => onHoverOut?.(gestureToPressableEvent(event)),\n                delayHoverOut\n              );\n              return;\n            }\n            onHoverOut?.(gestureToPressableEvent(event));\n          }),\n      [delayHoverIn, delayHoverOut, onHoverIn, onHoverOut]\n    );\n\n    const pressDelayTimeoutRef = useRef<number | null>(null);\n    const isTouchPropagationAllowed = useRef<boolean>(false);\n\n    // iOS only: due to varying flow of gestures, events sometimes have to be saved for later use\n    const deferredEventPayload = useRef<PressableEvent | null>(null);\n\n    const pressInHandler = useCallback(\n      (event: PressableEvent) => {\n        if (handlingOnTouchesDown.current) {\n          deferredEventPayload.current = event;\n        }\n\n        if (!isTouchPropagationAllowed.current) {\n          return;\n        }\n\n        deferredEventPayload.current = null;\n\n        onPressIn?.(event);\n        isPressCallbackEnabled.current = true;\n        pressDelayTimeoutRef.current = null;\n        setPressedState(true);\n      },\n      [onPressIn]\n    );\n\n    const pressOutHandler = useCallback(\n      (event: PressableEvent) => {\n        if (!isTouchPropagationAllowed.current) {\n          hasPassedBoundsChecks.current = false;\n          isPressCallbackEnabled.current = true;\n          deferredEventPayload.current = null;\n\n          if (longPressTimeoutRef.current) {\n            clearTimeout(longPressTimeoutRef.current);\n            longPressTimeoutRef.current = null;\n          }\n\n          if (pressDelayTimeoutRef.current) {\n            clearTimeout(pressDelayTimeoutRef.current);\n            pressDelayTimeoutRef.current = null;\n          }\n\n          return;\n        }\n\n        if (\n          !hasPassedBoundsChecks.current ||\n          event.nativeEvent.touches.length >\n            event.nativeEvent.changedTouches.length\n        ) {\n          return;\n        }\n\n        if (unstable_pressDelay && pressDelayTimeoutRef.current !== null) {\n          // When delay is preemptively finished by lifting touches,\n          // we want to immediately activate it's effects - pressInHandler,\n          // even though we are located at the pressOutHandler\n          clearTimeout(pressDelayTimeoutRef.current);\n          pressInHandler(event);\n        }\n\n        if (deferredEventPayload.current) {\n          onPressIn?.(deferredEventPayload.current);\n          deferredEventPayload.current = null;\n        }\n\n        onPressOut?.(event);\n\n        if (isPressCallbackEnabled.current) {\n          onPress?.(event);\n        }\n\n        if (longPressTimeoutRef.current) {\n          clearTimeout(longPressTimeoutRef.current);\n          longPressTimeoutRef.current = null;\n        }\n\n        isTouchPropagationAllowed.current = false;\n        hasPassedBoundsChecks.current = false;\n        isPressCallbackEnabled.current = true;\n        setPressedState(false);\n      },\n      [onPress, onPressIn, onPressOut, pressInHandler, unstable_pressDelay]\n    );\n\n    const handlingOnTouchesDown = useRef<boolean>(false);\n    const onEndHandlingTouchesDown = useRef<(() => void) | null>(null);\n    const cancelledMidPress = useRef<boolean>(false);\n\n    const activateLongPress = useCallback(\n      (event: GestureTouchEvent) => {\n        if (!isTouchPropagationAllowed.current) {\n          return;\n        }\n\n        if (hasPassedBoundsChecks.current) {\n          onLongPress?.(gestureTouchToPressableEvent(event));\n          isPressCallbackEnabled.current = false;\n        }\n\n        if (longPressTimeoutRef.current) {\n          clearTimeout(longPressTimeoutRef.current);\n          longPressTimeoutRef.current = null;\n        }\n      },\n      [onLongPress]\n    );\n\n    const longPressTimeoutRef = useRef<number | null>(null);\n    const longPressMinDuration =\n      (delayLongPress ?? DEFAULT_LONG_PRESS_DURATION) +\n      (unstable_pressDelay ?? 0);\n\n    const innerPressableRef = useRef<View>(null);\n\n    const measureCallback = useCallback(\n      (width: number, height: number, event: GestureTouchEvent) => {\n        if (\n          !isTouchWithinInset(\n            {\n              width,\n              height,\n            },\n            normalizedHitSlop,\n            event.changedTouches.at(-1)\n          ) ||\n          hasPassedBoundsChecks.current ||\n          cancelledMidPress.current\n        ) {\n          cancelledMidPress.current = false;\n          onEndHandlingTouchesDown.current = null;\n          handlingOnTouchesDown.current = false;\n          return;\n        }\n\n        hasPassedBoundsChecks.current = true;\n\n        // In case of multiple touches, the first one starts long press gesture\n        if (longPressTimeoutRef.current === null) {\n          // Start long press gesture timer\n          longPressTimeoutRef.current = setTimeout(\n            () => activateLongPress(event),\n            longPressMinDuration\n          );\n        }\n\n        if (unstable_pressDelay) {\n          pressDelayTimeoutRef.current = setTimeout(() => {\n            pressInHandler(gestureTouchToPressableEvent(event));\n          }, unstable_pressDelay);\n        } else {\n          pressInHandler(gestureTouchToPressableEvent(event));\n        }\n\n        onEndHandlingTouchesDown.current?.();\n        onEndHandlingTouchesDown.current = null;\n        handlingOnTouchesDown.current = false;\n      },\n      [\n        activateLongPress,\n        longPressMinDuration,\n        normalizedHitSlop,\n        pressInHandler,\n        unstable_pressDelay,\n      ]\n    );\n\n    const pressAndTouchGesture = useMemo(\n      () =>\n        Gesture.LongPress()\n          .minDuration(INT32_MAX) // Stops long press from blocking native gesture\n          .maxDistance(INT32_MAX) // Stops long press from cancelling after set distance\n          .cancelsTouchesInView(false)\n          .onTouchesDown((event) => {\n            handlingOnTouchesDown.current = true;\n            if (pressableRef) {\n              (pressableRef as RefObject<View>).current?.measure(\n                (_x, _y, width, height) => {\n                  measureCallback(width, height, event);\n                }\n              );\n            } else {\n              innerPressableRef.current?.measure((_x, _y, width, height) => {\n                measureCallback(width, height, event);\n              });\n            }\n          })\n          .onTouchesUp((event) => {\n            if (handlingOnTouchesDown.current) {\n              onEndHandlingTouchesDown.current = () =>\n                pressOutHandler(gestureTouchToPressableEvent(event));\n              return;\n            }\n            // On iOS, short taps will make LongPress gesture call onTouchesUp before Native gesture calls onStart\n            // This variable ensures that onStart isn't detected as the first gesture since Pressable is pressed.\n            if (deferredEventPayload.current !== null) {\n              shouldPreventNativeEffects.current = true;\n            }\n            pressOutHandler(gestureTouchToPressableEvent(event));\n          })\n          .onTouchesCancelled((event) => {\n            isPressCallbackEnabled.current = false;\n\n            if (handlingOnTouchesDown.current) {\n              cancelledMidPress.current = true;\n              onEndHandlingTouchesDown.current = () =>\n                pressOutHandler(gestureTouchToPressableEvent(event));\n              return;\n            }\n\n            if (\n              !hasPassedBoundsChecks.current ||\n              event.allTouches.length > event.changedTouches.length\n            ) {\n              return;\n            }\n\n            pressOutHandler(gestureTouchToPressableEvent(event));\n          }),\n      [pressableRef, measureCallback, pressOutHandler]\n    );\n\n    // RNButton is placed inside ButtonGesture to enable Android's ripple and to capture non-propagating events\n    const buttonGesture = useMemo(\n      () =>\n        Gesture.Native()\n          .onBegin(() => {\n            // Android sets BEGAN state on press down\n            if (Platform.OS === 'android' || Platform.OS === 'macos') {\n              isTouchPropagationAllowed.current = true;\n            }\n          })\n          .onStart(() => {\n            if (Platform.OS === 'web') {\n              isTouchPropagationAllowed.current = true;\n            }\n\n            // iOS sets ACTIVE state on press down\n            if (Platform.OS !== 'ios') {\n              return;\n            }\n\n            if (deferredEventPayload.current) {\n              isTouchPropagationAllowed.current = true;\n\n              if (hasPassedBoundsChecks.current) {\n                pressInHandler(deferredEventPayload.current);\n                deferredEventPayload.current = null;\n              } else {\n                pressOutHandler(deferredEventPayload.current);\n                isTouchPropagationAllowed.current = false;\n              }\n\n              return;\n            }\n\n            if (hasPassedBoundsChecks.current) {\n              isTouchPropagationAllowed.current = true;\n              return;\n            }\n\n            if (shouldPreventNativeEffects.current) {\n              shouldPreventNativeEffects.current = false;\n              if (!handlingOnTouchesDown.current) {\n                return;\n              }\n            }\n\n            isTouchPropagationAllowed.current = true;\n          }),\n      [pressInHandler, pressOutHandler]\n    );\n\n    const appliedHitSlop = addInsets(\n      normalizedHitSlop,\n      normalizedPressRetentionOffset\n    );\n\n    const isPressableEnabled = disabled !== true;\n\n    const gestures = [buttonGesture, pressAndTouchGesture, hoverGesture];\n\n    for (const gesture of gestures) {\n      gesture.enabled(isPressableEnabled);\n      gesture.runOnJS(true);\n      gesture.hitSlop(appliedHitSlop);\n      gesture.shouldCancelWhenOutside(Platform.OS === 'web' ? false : true);\n    }\n\n    // Uses different hitSlop, to activate on hitSlop area instead of pressRetentionOffset area\n    buttonGesture.hitSlop(normalizedHitSlop);\n\n    const gesture = Gesture.Simultaneous(...gestures);\n\n    // `cursor: 'pointer'` on `RNButton` crashes iOS\n    const pointerStyle: StyleProp<ViewStyle> =\n      Platform.OS === 'web' ? { cursor: 'pointer' } : {};\n\n    const styleProp =\n      typeof style === 'function' ? style({ pressed: pressedState }) : style;\n\n    const childrenProp =\n      typeof children === 'function'\n        ? children({ pressed: pressedState })\n        : children;\n\n    const rippleColor = useMemo(() => {\n      if (IS_FABRIC === null) {\n        IS_FABRIC = isFabric();\n      }\n\n      const defaultRippleColor = android_ripple ? undefined : 'transparent';\n      const unprocessedRippleColor =\n        android_ripple?.color ?? defaultRippleColor;\n      return IS_FABRIC\n        ? unprocessedRippleColor\n        : processColor(unprocessedRippleColor);\n    }, [android_ripple]);\n\n    return (\n      <GestureDetector gesture={gesture}>\n        <NativeButton\n          {...remainingProps}\n          ref={pressableRef ?? innerPressableRef}\n          accessible={accessible !== false}\n          hitSlop={appliedHitSlop}\n          enabled={isPressableEnabled}\n          touchSoundDisabled={android_disableSound ?? undefined}\n          rippleColor={rippleColor}\n          rippleRadius={android_ripple?.radius ?? undefined}\n          style={[pointerStyle, styleProp]}\n          testOnly_onPress={IS_TEST_ENV ? onPress : undefined}\n          testOnly_onPressIn={IS_TEST_ENV ? onPressIn : undefined}\n          testOnly_onPressOut={IS_TEST_ENV ? onPressOut : undefined}\n          testOnly_onLongPress={IS_TEST_ENV ? onLongPress : undefined}>\n          {childrenProp}\n          {__DEV__ ? (\n            <PressabilityDebugView color=\"red\" hitSlop={normalizedHitSlop} />\n          ) : null}\n        </NativeButton>\n      </GestureDetector>\n    );\n  }\n);\n\nexport default Pressable;\n"],"mappings":"+pBAAA,MAAO,CAAAA,KAAP,EAEEC,UAFF,CAIEC,WAJF,CAKEC,OALF,CAMEC,MANF,CAOEC,QAPF,KAQO,OARP,CASA,OAASC,cAAc,GAAI,CAAAC,OAA3B,KAA0C,wCAA1C,CACA,OAASC,eAAT,KAAgC,yCAAhC,QAAAC,QAAA,qDAAAC,YAAA,kDAUA,MAAO,CAAAC,YAAP,KAAyB,yBAAzB,CACA,OACEC,aADF,CAEEC,uBAFF,CAGEC,kBAHF,CAIEC,4BAJF,CAKEC,SALF,KAMO,SANP,CAOA,OAASC,qBAAT,KAAsC,sCAAtC,CAEA,OAASC,SAAT,CAAoBC,QAApB,CAA8BC,SAA9B,KAA+C,aAA/C,CAEA,KAAM,CAAAC,2BAA2B,CAAG,GAApC,CACA,KAAM,CAAAC,WAAW,CAAGF,SAAS,EAA7B,CAEA,GAAI,CAAAG,SAAyB,CAAG,IAAhC,CAEA,KAAM,CAAAC,SAAS,CAAGvB,UAAU,CAC1B,CAACwB,KAAD,CAAwBC,YAAxB,GAA6D,KAAAC,qBAAA,CAC3D,KAAM,CACJC,gBADI,CAEJC,OAFI,CAGJC,oBAHI,CAIJC,YAJI,CAKJC,SALI,CAMJC,aANI,CAOJC,UAPI,CAQJC,cARI,CASJC,mBATI,CAUJC,OAVI,CAWJC,SAXI,CAYJC,UAZI,CAaJC,WAbI,CAcJC,KAdI,CAeJC,QAfI,CAgBJC,oBAhBI,CAiBJC,cAjBI,CAkBJC,QAlBI,CAmBJC,UAnBI,EAqBFrB,KArBJ,CAoBKsB,cAAA,CAAAC,6BAAA,CACDvB,KArBJ,CAAAwB,SAAA,EAuBA,KAAM,CAACC,YAAD,CAAeC,eAAf,EAAkC9C,QAAQ,CAACuB,gBAAD,SAACA,gBAAD,UAACA,gBAAD,CAAqB,KAArB,CAAhD,CAGA,KAAM,CAAAwB,sBAAsB,CAAGhD,MAAM,CAAU,IAAV,CAArC,CACA,KAAM,CAAAiD,qBAAqB,CAAGjD,MAAM,CAAU,KAAV,CAApC,CACA,KAAM,CAAAkD,0BAA0B,CAAGlD,MAAM,CAAU,KAAV,CAAzC,CAEA,KAAM,CAAAmD,iBAAyB,CAAGpD,OAAO,CACvC,IACE,MAAO,CAAA0B,OAAP,GAAmB,QAAnB,CAA8BjB,aAAa,CAACiB,OAAD,CAA3C,CAAwDA,OAAxD,SAAwDA,OAAxD,UAAwDA,OAAxD,CAAmE,EAF9B,CAGvC,CAACA,OAAD,CAHuC,CAAzC,CAMA,KAAM,CAAA2B,8BAAsC,CAAGrD,OAAO,CACpD,IACE,MAAO,CAAA2B,oBAAP,GAAgC,QAAhC,CACIlB,aAAa,CAACkB,oBAAD,CADjB,CAEKA,oBAFL,SAEKA,oBAFL,UAEKA,oBAFL,CAE6B,EAJqB,CAKpD,CAACA,oBAAD,CALoD,CAAtD,CAQA,KAAM,CAAA2B,cAAc,CAAGrD,MAAM,CAAgB,IAAhB,CAA7B,CACA,KAAM,CAAAsD,eAAe,CAAGtD,MAAM,CAAgB,IAAhB,CAA9B,CAEA,KAAM,CAAAuD,YAAY,CAAGxD,OAAO,CAC1B,IACEI,OAAO,CAACqD,KAAR,GACGC,gBADH,CACoB,IADpB,EAEGC,oBAFH,CAEwB,KAFxB,EAGGC,OAHH,CAGYC,KAAD,EAAW,CAClB,GAAIN,eAAe,CAACO,OAApB,CAA6B,CAC3BC,YAAY,CAACR,eAAe,CAACO,OAAjB,CAAZ,CACD,CACD,GAAIlC,YAAJ,CAAkB,CAChB0B,cAAc,CAACQ,OAAf,CAAyBE,UAAU,CACjC,IAAMnC,SAAN,SAAMA,SAAN,iBAAMA,SAAS,CAAGnB,uBAAuB,CAACmD,KAAD,CAA1B,CADkB,CAEjCjC,YAFiC,CAAnC,CAIA,OACD,CACDC,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAGnB,uBAAuB,CAACmD,KAAD,CAA1B,CAAT,CACD,CAfH,EAgBGI,UAhBH,CAgBeJ,KAAD,EAAW,CACrB,GAAIP,cAAc,CAACQ,OAAnB,CAA4B,CAC1BC,YAAY,CAACT,cAAc,CAACQ,OAAhB,CAAZ,CACD,CACD,GAAIhC,aAAJ,CAAmB,CACjByB,eAAe,CAACO,OAAhB,CAA0BE,UAAU,CAClC,IAAMjC,UAAN,SAAMA,UAAN,iBAAMA,UAAU,CAAGrB,uBAAuB,CAACmD,KAAD,CAA1B,CADkB,CAElC/B,aAFkC,CAApC,CAIA,OACD,CACDC,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAGrB,uBAAuB,CAACmD,KAAD,CAA1B,CAAV,CACD,CA5BH,CAFwB,CA+B1B,CAACjC,YAAD,CAAeE,aAAf,CAA8BD,SAA9B,CAAyCE,UAAzC,CA/B0B,CAA5B,CAkCA,KAAM,CAAAmC,oBAAoB,CAAGjE,MAAM,CAAgB,IAAhB,CAAnC,CACA,KAAM,CAAAkE,yBAAyB,CAAGlE,MAAM,CAAU,KAAV,CAAxC,CAGA,KAAM,CAAAmE,oBAAoB,CAAGnE,MAAM,CAAwB,IAAxB,CAAnC,CAEA,KAAM,CAAAoE,cAAc,CAAGtE,WAAW,CAC/B8D,KAAD,EAA2B,CACzB,GAAIS,qBAAqB,CAACR,OAA1B,CAAmC,CACjCM,oBAAoB,CAACN,OAArB,CAA+BD,KAA/B,CACD,CAED,GAAI,CAACM,yBAAyB,CAACL,OAA/B,CAAwC,CACtC,OACD,CAEDM,oBAAoB,CAACN,OAArB,CAA+B,IAA/B,CAEA3B,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAG0B,KAAH,CAAT,CACAZ,sBAAsB,CAACa,OAAvB,CAAiC,IAAjC,CACAI,oBAAoB,CAACJ,OAArB,CAA+B,IAA/B,CACAd,eAAe,CAAC,IAAD,CAAf,CACD,CAhB+B,CAiBhC,CAACb,SAAD,CAjBgC,CAAlC,CAoBA,KAAM,CAAAoC,eAAe,CAAGxE,WAAW,CAChC8D,KAAD,EAA2B,CACzB,GAAI,CAACM,yBAAyB,CAACL,OAA/B,CAAwC,CACtCZ,qBAAqB,CAACY,OAAtB,CAAgC,KAAhC,CACAb,sBAAsB,CAACa,OAAvB,CAAiC,IAAjC,CACAM,oBAAoB,CAACN,OAArB,CAA+B,IAA/B,CAEA,GAAIU,mBAAmB,CAACV,OAAxB,CAAiC,CAC/BC,YAAY,CAACS,mBAAmB,CAACV,OAArB,CAAZ,CACAU,mBAAmB,CAACV,OAApB,CAA8B,IAA9B,CACD,CAED,GAAII,oBAAoB,CAACJ,OAAzB,CAAkC,CAChCC,YAAY,CAACG,oBAAoB,CAACJ,OAAtB,CAAZ,CACAI,oBAAoB,CAACJ,OAArB,CAA+B,IAA/B,CACD,CAED,OACD,CAED,GACE,CAACZ,qBAAqB,CAACY,OAAvB,EACAD,KAAK,CAACY,WAAN,CAAkBC,OAAlB,CAA0BC,MAA1B,CACEd,KAAK,CAACY,WAAN,CAAkBG,cAAlB,CAAiCD,MAHrC,CAIE,CACA,OACD,CAED,GAAI1C,mBAAmB,EAAIiC,oBAAoB,CAACJ,OAArB,GAAiC,IAA5D,CAAkE,CAIhEC,YAAY,CAACG,oBAAoB,CAACJ,OAAtB,CAAZ,CACAO,cAAc,CAACR,KAAD,CAAd,CACD,CAED,GAAIO,oBAAoB,CAACN,OAAzB,CAAkC,CAChC3B,SAAS,OAAT,EAAAA,SAAS,SAAT,QAAAA,SAAS,CAAGiC,oBAAoB,CAACN,OAAxB,CAAT,CACAM,oBAAoB,CAACN,OAArB,CAA+B,IAA/B,CACD,CAED1B,UAAU,OAAV,EAAAA,UAAU,SAAV,QAAAA,UAAU,CAAGyB,KAAH,CAAV,CAEA,GAAIZ,sBAAsB,CAACa,OAA3B,CAAoC,CAClC5B,OAAO,OAAP,EAAAA,OAAO,SAAP,QAAAA,OAAO,CAAG2B,KAAH,CAAP,CACD,CAED,GAAIW,mBAAmB,CAACV,OAAxB,CAAiC,CAC/BC,YAAY,CAACS,mBAAmB,CAACV,OAArB,CAAZ,CACAU,mBAAmB,CAACV,OAApB,CAA8B,IAA9B,CACD,CAEDK,yBAAyB,CAACL,OAA1B,CAAoC,KAApC,CACAZ,qBAAqB,CAACY,OAAtB,CAAgC,KAAhC,CACAb,sBAAsB,CAACa,OAAvB,CAAiC,IAAjC,CACAd,eAAe,CAAC,KAAD,CAAf,CACD,CAxDgC,CAyDjC,CAACd,OAAD,CAAUC,SAAV,CAAqBC,UAArB,CAAiCiC,cAAjC,CAAiDpC,mBAAjD,CAzDiC,CAAnC,CA4DA,KAAM,CAAAqC,qBAAqB,CAAGrE,MAAM,CAAU,KAAV,CAApC,CACA,KAAM,CAAA4E,wBAAwB,CAAG5E,MAAM,CAAsB,IAAtB,CAAvC,CACA,KAAM,CAAA6E,iBAAiB,CAAG7E,MAAM,CAAU,KAAV,CAAhC,CAEA,KAAM,CAAA8E,iBAAiB,CAAGhF,WAAW,CAClC8D,KAAD,EAA8B,CAC5B,GAAI,CAACM,yBAAyB,CAACL,OAA/B,CAAwC,CACtC,OACD,CAED,GAAIZ,qBAAqB,CAACY,OAA1B,CAAmC,CACjCzB,WAAW,OAAX,EAAAA,WAAW,SAAX,QAAAA,WAAW,CAAGzB,4BAA4B,CAACiD,KAAD,CAA/B,CAAX,CACAZ,sBAAsB,CAACa,OAAvB,CAAiC,KAAjC,CACD,CAED,GAAIU,mBAAmB,CAACV,OAAxB,CAAiC,CAC/BC,YAAY,CAACS,mBAAmB,CAACV,OAArB,CAAZ,CACAU,mBAAmB,CAACV,OAApB,CAA8B,IAA9B,CACD,CACF,CAfkC,CAgBnC,CAACzB,WAAD,CAhBmC,CAArC,CAmBA,KAAM,CAAAmC,mBAAmB,CAAGvE,MAAM,CAAgB,IAAhB,CAAlC,CACA,KAAM,CAAA+E,oBAAoB,CACxB,CAAChD,cAAD,SAACA,cAAD,UAACA,cAAD,CAAmBd,2BAAnB,GACCe,mBADD,SACCA,mBADD,UACCA,mBADD,CACwB,CADxB,CADF,CAIA,KAAM,CAAAgD,iBAAiB,CAAGhF,MAAM,CAAO,IAAP,CAAhC,CAEA,KAAM,CAAAiF,eAAe,CAAGnF,WAAW,CACjC,CAACoF,KAAD,CAAgBC,MAAhB,CAAgCvB,KAAhC,GAA6D,KAAAwB,qBAAA,CAC3D,GACE,CAAC1E,kBAAkB,CACjB,CACEwE,KADF,CAEEC,MAFF,CADiB,CAKjBhC,iBALiB,CAMjBS,KAAK,CAACe,cAAN,CAAqBU,EAArB,CAAwB,CAAC,CAAzB,CANiB,CAAnB,EAQApC,qBAAqB,CAACY,OARtB,EASAgB,iBAAiB,CAAChB,OAVpB,CAWE,CACAgB,iBAAiB,CAAChB,OAAlB,CAA4B,KAA5B,CACAe,wBAAwB,CAACf,OAAzB,CAAmC,IAAnC,CACAQ,qBAAqB,CAACR,OAAtB,CAAgC,KAAhC,CACA,OACD,CAEDZ,qBAAqB,CAACY,OAAtB,CAAgC,IAAhC,CAGA,GAAIU,mBAAmB,CAACV,OAApB,GAAgC,IAApC,CAA0C,CAExCU,mBAAmB,CAACV,OAApB,CAA8BE,UAAU,CACtC,IAAMe,iBAAiB,CAAClB,KAAD,CADe,CAEtCmB,oBAFsC,CAAxC,CAID,CAED,GAAI/C,mBAAJ,CAAyB,CACvBiC,oBAAoB,CAACJ,OAArB,CAA+BE,UAAU,CAAC,IAAM,CAC9CK,cAAc,CAACzD,4BAA4B,CAACiD,KAAD,CAA7B,CAAd,CACD,CAFwC,CAEtC5B,mBAFsC,CAAzC,CAGD,CAJD,IAIO,CACLoC,cAAc,CAACzD,4BAA4B,CAACiD,KAAD,CAA7B,CAAd,CACD,CAED,CAAAwB,qBAAA,CAAAR,wBAAwB,CAACf,OAAzB,UAAAuB,qBAAA,iBAAAA,qBAAA,CAAAE,IAAA,CAAAV,wBAAwB,EACxBA,wBAAwB,CAACf,OAAzB,CAAmC,IAAnC,CACAQ,qBAAqB,CAACR,OAAtB,CAAgC,KAAhC,CACD,CA1CgC,CA2CjC,CACEiB,iBADF,CAEEC,oBAFF,CAGE5B,iBAHF,CAIEiB,cAJF,CAKEpC,mBALF,CA3CiC,CAAnC,CAoDA,KAAM,CAAAuD,oBAAoB,CAAGxF,OAAO,CAClC,IACEI,OAAO,CAACqF,SAAR,GACGC,WADH,CACe3E,SADf,EAEG4E,WAFH,CAEe5E,SAFf,EAGG4C,oBAHH,CAGwB,KAHxB,EAIGiC,aAJH,CAIkB/B,KAAD,EAAW,CACxBS,qBAAqB,CAACR,OAAtB,CAAgC,IAAhC,CACA,GAAIvC,YAAJ,CAAkB,KAAAsE,QAAA,CAChB,CAAAA,QAAA,CAACtE,YAAD,CAAkCuC,OAAlC,UAAA+B,QAAA,iBAAAA,QAAA,CAA2CC,OAA3C,CACE,CAACC,EAAD,CAAKC,EAAL,CAASb,KAAT,CAAgBC,MAAhB,GAA2B,CACzBF,eAAe,CAACC,KAAD,CAAQC,MAAR,CAAgBvB,KAAhB,CAAf,CACD,CAHH,EAKD,CAND,IAMO,KAAAoC,qBAAA,CACL,CAAAA,qBAAA,CAAAhB,iBAAiB,CAACnB,OAAlB,UAAAmC,qBAAA,iBAAAA,qBAAA,CAA2BH,OAA3B,CAAmC,CAACC,EAAD,CAAKC,EAAL,CAASb,KAAT,CAAgBC,MAAhB,GAA2B,CAC5DF,eAAe,CAACC,KAAD,CAAQC,MAAR,CAAgBvB,KAAhB,CAAf,CACD,CAFD,EAGD,CACF,CAjBH,EAkBGqC,WAlBH,CAkBgBrC,KAAD,EAAW,CACtB,GAAIS,qBAAqB,CAACR,OAA1B,CAAmC,CACjCe,wBAAwB,CAACf,OAAzB,CAAmC,IACjCS,eAAe,CAAC3D,4BAA4B,CAACiD,KAAD,CAA7B,CADjB,CAEA,OACD,CAGD,GAAIO,oBAAoB,CAACN,OAArB,GAAiC,IAArC,CAA2C,CACzCX,0BAA0B,CAACW,OAA3B,CAAqC,IAArC,CACD,CACDS,eAAe,CAAC3D,4BAA4B,CAACiD,KAAD,CAA7B,CAAf,CACD,CA9BH,EA+BGsC,kBA/BH,CA+BuBtC,KAAD,EAAW,CAC7BZ,sBAAsB,CAACa,OAAvB,CAAiC,KAAjC,CAEA,GAAIQ,qBAAqB,CAACR,OAA1B,CAAmC,CACjCgB,iBAAiB,CAAChB,OAAlB,CAA4B,IAA5B,CACAe,wBAAwB,CAACf,OAAzB,CAAmC,IACjCS,eAAe,CAAC3D,4BAA4B,CAACiD,KAAD,CAA7B,CADjB,CAEA,OACD,CAED,GACE,CAACX,qBAAqB,CAACY,OAAvB,EACAD,KAAK,CAACuC,UAAN,CAAiBzB,MAAjB,CAA0Bd,KAAK,CAACe,cAAN,CAAqBD,MAFjD,CAGE,CACA,OACD,CAEDJ,eAAe,CAAC3D,4BAA4B,CAACiD,KAAD,CAA7B,CAAf,CACD,CAjDH,CAFgC,CAoDlC,CAACtC,YAAD,CAAe2D,eAAf,CAAgCX,eAAhC,CApDkC,CAApC,CAwDA,KAAM,CAAA8B,aAAa,CAAGrG,OAAO,CAC3B,IACEI,OAAO,CAACkG,MAAR,GACG1C,OADH,CACW,IAAM,CAEb,GAAI,YAAJ,CAA0D,CACxDO,yBAAyB,CAACL,OAA1B,CAAoC,IAApC,CACD,CACF,CANH,EAOGyC,OAPH,CAOW,IAAM,CACb,QAA2B,CACzBpC,yBAAyB,CAACL,OAA1B,CAAoC,IAApC,CACD,CAGD,QAA2B,CACzB,OACD,CAED,GAAIM,oBAAoB,CAACN,OAAzB,CAAkC,CAChCK,yBAAyB,CAACL,OAA1B,CAAoC,IAApC,CAEA,GAAIZ,qBAAqB,CAACY,OAA1B,CAAmC,CACjCO,cAAc,CAACD,oBAAoB,CAACN,OAAtB,CAAd,CACAM,oBAAoB,CAACN,OAArB,CAA+B,IAA/B,CACD,CAHD,IAGO,CACLS,eAAe,CAACH,oBAAoB,CAACN,OAAtB,CAAf,CACAK,yBAAyB,CAACL,OAA1B,CAAoC,KAApC,CACD,CAED,OACD,CAED,GAAIZ,qBAAqB,CAACY,OAA1B,CAAmC,CACjCK,yBAAyB,CAACL,OAA1B,CAAoC,IAApC,CACA,OACD,CAED,GAAIX,0BAA0B,CAACW,OAA/B,CAAwC,CACtCX,0BAA0B,CAACW,OAA3B,CAAqC,KAArC,CACA,GAAI,CAACQ,qBAAqB,CAACR,OAA3B,CAAoC,CAClC,OACD,CACF,CAEDK,yBAAyB,CAACL,OAA1B,CAAoC,IAApC,CACD,CA5CH,CAFyB,CA+C3B,CAACO,cAAD,CAAiBE,eAAjB,CA/C2B,CAA7B,CAkDA,KAAM,CAAAiC,cAAc,CAAG3F,SAAS,CAC9BuC,iBAD8B,CAE9BC,8BAF8B,CAAhC,CAKA,KAAM,CAAAoD,kBAAkB,CAAG/D,QAAQ,GAAK,IAAxC,CAEA,KAAM,CAAAgE,QAAQ,CAAG,CAACL,aAAD,CAAgBb,oBAAhB,CAAsChC,YAAtC,CAAjB,CAEA,IAAK,KAAM,CAAAmD,OAAX,GAAsB,CAAAD,QAAtB,CAAgC,CAC9BC,OAAO,CAACC,OAAR,CAAgBH,kBAAhB,EACAE,OAAO,CAACE,OAAR,CAAgB,IAAhB,EACAF,OAAO,CAACjF,OAAR,CAAgB8E,cAAhB,EACAG,OAAO,CAACG,uBAAR,CAAgC,KAAwB,KAAxB,CAAgC,IAAhE,EACD,CAGDT,aAAa,CAAC3E,OAAd,CAAsB0B,iBAAtB,EAEA,KAAM,CAAAuD,OAAO,CAAGvG,OAAO,CAAC2G,YAAR,CAAqB,GAAGL,QAAxB,CAAhB,CAGA,KAAM,CAAAM,YAAkC,CACtC,KAAwB,CAAEC,MAAM,CAAE,SAAV,CAAxB,CAAgD,EADlD,CAGA,KAAM,CAAAC,SAAS,CACb,MAAO,CAAA5E,KAAP,GAAiB,UAAjB,CAA8BA,KAAK,CAAC,CAAE6E,OAAO,CAAEpE,YAAX,CAAD,CAAnC,CAAiET,KADnE,CAGA,KAAM,CAAA8E,YAAY,CAChB,MAAO,CAAA7E,QAAP,GAAoB,UAApB,CACIA,QAAQ,CAAC,CAAE4E,OAAO,CAAEpE,YAAX,CAAD,CADZ,CAEIR,QAHN,CAKA,KAAM,CAAA8E,WAAW,CAAGrH,OAAO,CAAC,IAAM,KAAAsH,qBAAA,CAChC,GAAIlG,SAAS,GAAK,IAAlB,CAAwB,CACtBA,SAAS,CAAGJ,QAAQ,EAApB,CACD,CAED,KAAM,CAAAuG,kBAAkB,CAAG9E,cAAc,CAAG+E,SAAH,CAAe,aAAxD,CACA,KAAM,CAAAC,sBAAsB,EAAAH,qBAAA,CAC1B7E,cAD0B,SAC1BA,cAD0B,iBAC1BA,cAAc,CAAEiF,KADU,UAAAJ,qBAAA,UAAAA,qBAAA,CACDC,kBAD3B,CAEA,MAAO,CAAAnG,SAAS,CACZqG,sBADY,CAEZlH,YAAY,CAACkH,sBAAD,CAFhB,CAGD,CAX0B,CAWxB,CAAChF,cAAD,CAXwB,CAA3B,CAaA,MACE,CAAA5C,KAAA,CAAA8H,aAAA,CAACtH,eAAD,EAAiBsG,OAAO,CAAEA,OAA1B,EACE9G,KAAA,CAAA8H,aAAA,CAACnH,YAAD,CAAAoH,QAAA,IACMhF,cADN,EAEEiF,GAAG,CAAEtG,YAAF,SAAEA,YAAF,UAAEA,YAAF,CAAkB0D,iBAFvB,CAGEtC,UAAU,CAAEA,UAAU,GAAK,KAH7B,CAIEjB,OAAO,CAAE8E,cAJX,CAKEI,OAAO,CAAEH,kBALX,CAMEqB,kBAAkB,CAAEtF,oBAAF,SAAEA,oBAAF,UAAEA,oBAAF,CAA0BgF,SAN9C,CAOEH,WAAW,CAAEA,WAPf,CAQEU,YAAY,EAAAvG,qBAAA,CAAEiB,cAAF,SAAEA,cAAF,iBAAEA,cAAc,CAAEuF,MAAlB,UAAAxG,qBAAA,UAAAA,qBAAA,CAA4BgG,SAR1C,CASElF,KAAK,CAAE,CAAC0E,YAAD,CAAeE,SAAf,CATT,CAUEe,gBAAgB,CAAE9G,WAAW,CAAGe,OAAH,CAAasF,SAV5C,CAWEU,kBAAkB,CAAE/G,WAAW,CAAGgB,SAAH,CAAeqF,SAXhD,CAYEW,mBAAmB,CAAEhH,WAAW,CAAGiB,UAAH,CAAgBoF,SAZlD,CAaEY,oBAAoB,CAAEjH,WAAW,CAAGkB,WAAH,CAAiBmF,SAbpD,GAcGJ,YAdH,CAeG,MACCvH,KAAA,CAAA8H,aAAA,CAAC7G,qBAAD,EAAuB4G,KAAK,CAAC,KAA7B,CAAmChG,OAAO,CAAE0B,iBAA5C,EADM,CAEJ,IAjBN,CADF,CADF,CAuBD,CA1ayB,CAA5B,CA6aA,cAAe,CAAA/B,SAAf","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}