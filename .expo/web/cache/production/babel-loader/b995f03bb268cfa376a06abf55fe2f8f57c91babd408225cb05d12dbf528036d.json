{"ast":null,"code":"import{ContinousBaseGesture}from'./gesture';function changeEventCalculator(current,previous){'worklet';let changePayload;if(previous===undefined){changePayload={scaleChange:current.scale};}else{changePayload={scaleChange:current.scale/previous.scale};}return Object.assign({},current,changePayload);}export class PinchGesture extends ContinousBaseGesture{constructor(){super();this.handlerName='PinchGestureHandler';}onChange(callback){this.handlers.changeEventCalculator=changeEventCalculator;return super.onChange(callback);}}","map":{"version":3,"names":["ContinousBaseGesture","changeEventCalculator","current","previous","changePayload","undefined","scaleChange","scale","Object","assign","PinchGesture","constructor","handlerName","onChange","callback","handlers"],"sources":["C:\\Users\\pablo\\HospitalApp\\node_modules\\react-native-gesture-handler\\lib\\module\\handlers\\gestures\\pinchGesture.ts"],"sourcesContent":["import { ContinousBaseGesture } from './gesture';\nimport type { PinchGestureHandlerEventPayload } from '../GestureHandlerEventPayload';\nimport { GestureUpdateEvent } from '../gestureHandlerCommon';\n\nexport type PinchGestureChangeEventPayload = {\n  scaleChange: number;\n};\n\nfunction changeEventCalculator(\n  current: GestureUpdateEvent<PinchGestureHandlerEventPayload>,\n  previous?: GestureUpdateEvent<PinchGestureHandlerEventPayload>\n) {\n  'worklet';\n  let changePayload: PinchGestureChangeEventPayload;\n  if (previous === undefined) {\n    changePayload = {\n      scaleChange: current.scale,\n    };\n  } else {\n    changePayload = {\n      scaleChange: current.scale / previous.scale,\n    };\n  }\n\n  return { ...current, ...changePayload };\n}\n\nexport class PinchGesture extends ContinousBaseGesture<\n  PinchGestureHandlerEventPayload,\n  PinchGestureChangeEventPayload\n> {\n  constructor() {\n    super();\n\n    this.handlerName = 'PinchGestureHandler';\n  }\n\n  onChange(\n    callback: (\n      event: GestureUpdateEvent<\n        PinchGestureHandlerEventPayload & PinchGestureChangeEventPayload\n      >\n    ) => void\n  ) {\n    // @ts-ignore TS being overprotective, PinchGestureHandlerEventPayload is Record\n    this.handlers.changeEventCalculator = changeEventCalculator;\n    return super.onChange(callback);\n  }\n}\n\nexport type PinchGestureType = InstanceType<typeof PinchGesture>;\n"],"mappings":"AAAA,OAASA,oBAAT,KAAqC,WAArC,CAQA,QAAS,CAAAC,qBAATA,CACEC,OADF,CAEEC,QAFF,CAGE,CACA,UACA,GAAI,CAAAC,aAAJ,CACA,GAAID,QAAQ,GAAKE,SAAjB,CAA4B,CAC1BD,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KADP,CAAhB,CAGD,CAJD,IAIO,CACLH,aAAa,CAAG,CACdE,WAAW,CAAEJ,OAAO,CAACK,KAAR,CAAgBJ,QAAQ,CAACI,KADxB,CAAhB,CAGD,CAED,OAAAC,MAAA,CAAAC,MAAA,IAAYP,OAAL,CAAiBE,aAAA,EACzB,CAED,MAAO,MAAM,CAAAM,YAAN,QAA2B,CAAAV,oBAGhC,CACAW,WAAWA,CAAA,CAAG,CACZ,QAEA,KAAKC,WAAL,CAAmB,qBAAnB,CACD,CAEDC,QAAQA,CACNC,QADM,CAMN,CAEA,KAAKC,QAAL,CAAcd,qBAAd,CAAsCA,qBAAtC,CACA,MAAO,OAAMY,QAAN,CAAeC,QAAf,CAAP,CACD,CAjBD","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}