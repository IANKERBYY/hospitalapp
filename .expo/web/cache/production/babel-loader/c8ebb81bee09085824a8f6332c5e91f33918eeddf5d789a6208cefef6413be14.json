{"ast":null,"code":"\"use strict\";import{nanoid}from'nanoid/non-secure';export function createMemoryHistory(){let index=0;let items=[];const pending=[];const interrupt=()=>{pending.forEach(it=>{const cb=it.cb;it.cb=()=>cb(true);});};const history={get index(){const id=window.history.state?.id;if(id){const index=items.findIndex(item=>item.id===id);return index>-1?index:0;}return 0;},get(index){return items[index];},backIndex({path}){for(let i=index-1;i>=0;i--){const item=items[i];if(item.path===path){return i;}}return-1;},push({path,state}){interrupt();const id=nanoid();items=items.slice(0,index+1);items.push({path,state,id});index=items.length-1;window.history.pushState({id},'',path);},replace({path,state}){interrupt();const id=window.history.state?.id??nanoid();let pathWithHash=path;const hash=pathWithHash.includes('#')?'':location.hash;if(!items.length||items.findIndex(item=>item.id===id)<0){pathWithHash=pathWithHash+hash;items=[{path:pathWithHash,state,id}];index=0;}else{if(items[index].path===path){pathWithHash=pathWithHash+hash;}items[index]={path,state,id};}window.history.replaceState({id},'',pathWithHash);},go(n){interrupt();const nextIndex=index+n;const lastItemIndex=items.length-1;if(n<0&&!items[nextIndex]){n=-index;index=0;}else if(n>0&&nextIndex>lastItemIndex){n=lastItemIndex-index;index=lastItemIndex;}else{index=nextIndex;}if(n===0){return;}return new Promise((resolve,reject)=>{const done=interrupted=>{clearTimeout(timer);if(interrupted){reject(new Error('History was changed during navigation.'));return;}const{title}=window.document;window.document.title='';window.document.title=title;resolve();};pending.push({ref:done,cb:done});const timer=setTimeout(()=>{const foundIndex=pending.findIndex(it=>it.ref===done);if(foundIndex>-1){pending[foundIndex].cb();pending.splice(foundIndex,1);}index=this.index;},100);const onPopState=()=>{index=this.index;const last=pending.pop();window.removeEventListener('popstate',onPopState);last?.cb();};window.addEventListener('popstate',onPopState);window.history.go(n);});},listen(listener){const onPopState=()=>{index=this.index;if(pending.length){return;}listener();};window.addEventListener('popstate',onPopState);return()=>window.removeEventListener('popstate',onPopState);}};return history;}","map":{"version":3,"names":["nanoid","createMemoryHistory","index","items","pending","interrupt","forEach","it","cb","history","id","window","state","findIndex","item","get","backIndex","path","i","push","slice","length","pushState","replace","pathWithHash","hash","includes","location","replaceState","go","n","nextIndex","lastItemIndex","Promise","resolve","reject","done","interrupted","clearTimeout","timer","Error","title","document","ref","setTimeout","foundIndex","splice","onPopState","last","pop","removeEventListener","addEventListener","listen","listener"],"sources":["C:\\Users\\pablo\\HospitalApp\\node_modules\\@react-navigation\\native\\src\\createMemoryHistory.tsx"],"sourcesContent":["import type { NavigationState } from '@react-navigation/core';\nimport { nanoid } from 'nanoid/non-secure';\n\ntype HistoryRecord = {\n  // Unique identifier for this record to match it with window.history.state\n  id: string;\n  // Navigation state object for the history entry\n  state: NavigationState;\n  // Path of the history entry\n  path: string;\n};\n\nexport function createMemoryHistory() {\n  let index = 0;\n  let items: HistoryRecord[] = [];\n\n  // Pending callbacks for `history.go(n)`\n  // We might modify the callback stored if it was interrupted, so we have a ref to identify it\n  const pending: { ref: unknown; cb: (interrupted?: boolean) => void }[] = [];\n\n  const interrupt = () => {\n    // If another history operation was performed we need to interrupt existing ones\n    // This makes sure that calls such as `history.replace` after `history.go` don't happen\n    // Since otherwise it won't be correct if something else has changed\n    pending.forEach((it) => {\n      const cb = it.cb;\n      it.cb = () => cb(true);\n    });\n  };\n\n  const history = {\n    get index(): number {\n      // We store an id in the state instead of an index\n      // Index could get out of sync with in-memory values if page reloads\n      const id = window.history.state?.id;\n\n      if (id) {\n        const index = items.findIndex((item) => item.id === id);\n\n        return index > -1 ? index : 0;\n      }\n\n      return 0;\n    },\n\n    get(index: number) {\n      return items[index];\n    },\n\n    backIndex({ path }: { path: string }) {\n      // We need to find the index from the element before current to get closest path to go back to\n      for (let i = index - 1; i >= 0; i--) {\n        const item = items[i];\n\n        if (item.path === path) {\n          return i;\n        }\n      }\n\n      return -1;\n    },\n\n    push({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = nanoid();\n\n      // When a new entry is pushed, all the existing entries after index will be inaccessible\n      // So we remove any existing entries after the current index to clean them up\n      items = items.slice(0, index + 1);\n\n      items.push({ path, state, id });\n      index = items.length - 1;\n\n      // We pass empty string for title because it's ignored in all browsers except safari\n      // We don't store state object in history.state because:\n      // - browsers have limits on how big it can be, and we don't control the size\n      // - while not recommended, there could be non-serializable data in state\n      window.history.pushState({ id }, '', path);\n    },\n\n    replace({ path, state }: { path: string; state: NavigationState }) {\n      interrupt();\n\n      const id = window.history.state?.id ?? nanoid();\n\n      // Need to keep the hash part of the path if there was no previous history entry\n      // or the previous history entry had the same path\n      let pathWithHash = path;\n      const hash = pathWithHash.includes('#') ? '' : location.hash;\n\n      if (!items.length || items.findIndex((item) => item.id === id) < 0) {\n        // There are two scenarios for creating an array with only one history record:\n        // - When loaded id not found in the items array, this function by default will replace\n        //   the first item. We need to keep only the new updated object, otherwise it will break\n        //   the page when navigating forward in history.\n        // - This is the first time any state modifications are done\n        //   So we need to push the entry as there's nothing to replace\n\n        pathWithHash = pathWithHash + hash;\n        items = [{ path: pathWithHash, state, id }];\n        index = 0;\n      } else {\n        if (items[index].path === path) {\n          pathWithHash = pathWithHash + hash;\n        }\n        items[index] = { path, state, id };\n      }\n\n      window.history.replaceState({ id }, '', pathWithHash);\n    },\n\n    // `history.go(n)` is asynchronous, there are couple of things to keep in mind:\n    // - it won't do anything if we can't go `n` steps, the `popstate` event won't fire.\n    // - each `history.go(n)` call will trigger a separate `popstate` event with correct location.\n    // - the `popstate` event fires before the next frame after calling `history.go(n)`.\n    // This method differs from `history.go(n)` in the sense that it'll go back as many steps it can.\n    go(n: number) {\n      interrupt();\n\n      // To guard against unexpected navigation out of the app we will assume that browser history is only as deep as the length of our memory\n      // history. If we don't have an item to navigate to then update our index and navigate as far as we can without taking the user out of the app.\n      const nextIndex = index + n;\n      const lastItemIndex = items.length - 1;\n      if (n < 0 && !items[nextIndex]) {\n        // Attempted to navigate beyond the first index. Negating the current index will align the browser history with the first item.\n        n = -index;\n        index = 0;\n      } else if (n > 0 && nextIndex > lastItemIndex) {\n        // Attempted to navigate past the last index. Calculate how many indices away from the last index and go there.\n        n = lastItemIndex - index;\n        index = lastItemIndex;\n      } else {\n        index = nextIndex;\n      }\n\n      if (n === 0) {\n        return;\n      }\n\n      // When we call `history.go`, `popstate` will fire when there's history to go back to\n      // So we need to somehow handle following cases:\n      // - There's history to go back, `history.go` is called, and `popstate` fires\n      // - `history.go` is called multiple times, we need to resolve on respective `popstate`\n      // - No history to go back, but `history.go` was called, browser has no API to detect it\n      return new Promise<void>((resolve, reject) => {\n        const done = (interrupted?: boolean) => {\n          clearTimeout(timer);\n\n          if (interrupted) {\n            reject(new Error('History was changed during navigation.'));\n            return;\n          }\n\n          // There seems to be a bug in Chrome regarding updating the title\n          // If we set a title just before calling `history.go`, the title gets lost\n          // However the value of `document.title` is still what we set it to\n          // It's just not displayed in the tab bar\n          // To update the tab bar, we need to reset the title to something else first (e.g. '')\n          // And set the title to what it was before so it gets applied\n          // It won't work without setting it to empty string coz otherwise title isn't changing\n          // Which means that the browser won't do anything after setting the title\n          const { title } = window.document;\n\n          window.document.title = '';\n          window.document.title = title;\n\n          resolve();\n        };\n\n        pending.push({ ref: done, cb: done });\n\n        // If navigation didn't happen within 100ms, assume that it won't happen\n        // This may not be accurate, but hopefully it won't take so much time\n        // In Chrome, navigation seems to happen instantly in next microtask\n        // But on Firefox, it seems to take much longer, around 50ms from our testing\n        // We're using a hacky timeout since there doesn't seem to be way to know for sure\n        const timer = setTimeout(() => {\n          const foundIndex = pending.findIndex((it) => it.ref === done);\n\n          if (foundIndex > -1) {\n            pending[foundIndex].cb();\n            pending.splice(foundIndex, 1);\n          }\n\n          index = this.index;\n        }, 100);\n\n        const onPopState = () => {\n          // Fix createMemoryHistory.index variable's value\n          // as it may go out of sync when navigating in the browser.\n          index = this.index;\n\n          const last = pending.pop();\n\n          window.removeEventListener('popstate', onPopState);\n          last?.cb();\n        };\n\n        window.addEventListener('popstate', onPopState);\n        window.history.go(n);\n      });\n    },\n\n    // The `popstate` event is triggered when history changes, except `pushState` and `replaceState`\n    // If we call `history.go(n)` ourselves, we don't want it to trigger the listener\n    // Here we normalize it so that only external changes (e.g. user pressing back/forward) trigger the listener\n    listen(listener: () => void) {\n      const onPopState = () => {\n        // Fix createMemoryHistory.index variable's value\n        // as it may go out of sync when navigating in the browser.\n        index = this.index;\n\n        if (pending.length) {\n          // This was triggered by `history.go(n)`, we shouldn't call the listener\n          return;\n        }\n\n        listener();\n      };\n\n      window.addEventListener('popstate', onPopState);\n\n      return () => window.removeEventListener('popstate', onPopState);\n    },\n  };\n\n  return history;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}