{"ast":null,"code":"\"use strict\";import _objectWithoutPropertiesLoose from\"@babel/runtime/helpers/objectWithoutPropertiesLoose\";const _excluded=[\"children\",\"layout\",\"screenOptions\",\"screenLayout\",\"screenListeners\",\"UNSTABLE_router\"];import{CommonActions}from'@react-navigation/routers';import*as React from'react';import{isValidElementType}from'react-is';import useLatestCallback from'use-latest-callback';import{deepFreeze}from\"./deepFreeze.js\";import{Group}from\"./Group.js\";import{isArrayEqual}from\"./isArrayEqual.js\";import{isRecordEqual}from\"./isRecordEqual.js\";import{NavigationHelpersContext}from\"./NavigationHelpersContext.js\";import{NavigationRouteContext}from\"./NavigationRouteContext.js\";import{NavigationStateContext}from\"./NavigationStateContext.js\";import{PreventRemoveProvider}from\"./PreventRemoveProvider.js\";import{Screen}from\"./Screen.js\";import{PrivateValueStore}from\"./types.js\";import{useChildListeners}from\"./useChildListeners.js\";import{useComponent}from\"./useComponent.js\";import{useCurrentRender}from\"./useCurrentRender.js\";import{useDescriptors}from\"./useDescriptors.js\";import{useEventEmitter}from\"./useEventEmitter.js\";import{useFocusedListenersChildrenAdapter}from\"./useFocusedListenersChildrenAdapter.js\";import{useFocusEvents}from\"./useFocusEvents.js\";import{useIsomorphicLayoutEffect}from'./useIsomorphicLayoutEffect';import{useKeyedChildListeners}from\"./useKeyedChildListeners.js\";import{useLazyValue}from\"./useLazyValue.js\";import{useNavigationHelpers}from\"./useNavigationHelpers.js\";import{useOnAction}from\"./useOnAction.js\";import{useOnGetState}from\"./useOnGetState.js\";import{useOnRouteFocus}from\"./useOnRouteFocus.js\";import{useRegisterNavigator}from\"./useRegisterNavigator.js\";import{useScheduleUpdate}from\"./useScheduleUpdate.js\";import{jsx as _jsx}from\"react/jsx-runtime\";PrivateValueStore;const isScreen=child=>{return child.type===Screen;};const isGroup=child=>{return child.type===React.Fragment||child.type===Group;};const isValidKey=key=>key===undefined||typeof key==='string'&&key!=='';const getRouteConfigsFromChildren=(children,groupKey,groupOptions,groupLayout)=>{const configs=React.Children.toArray(children).reduce((acc,child)=>{if(React.isValidElement(child)){if(isScreen(child)){if(typeof child.props!=='object'||child.props===null){throw new Error(`Got an invalid element for screen.`);}if(typeof child.props.name!=='string'||child.props.name===''){throw new Error(`Got an invalid name (${JSON.stringify(child.props.name)}) for the screen. It must be a non-empty string.`);}if(child.props.navigationKey!==undefined&&(typeof child.props.navigationKey!=='string'||child.props.navigationKey==='')){throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the screen '${child.props.name}'. It must be a non-empty string or 'undefined'.`);}acc.push({keys:[groupKey,child.props.navigationKey],options:groupOptions,layout:groupLayout,props:child.props});return acc;}if(isGroup(child)){if(!isValidKey(child.props.navigationKey)){throw new Error(`Got an invalid 'navigationKey' prop (${JSON.stringify(child.props.navigationKey)}) for the group. It must be a non-empty string or 'undefined'.`);}acc.push(...getRouteConfigsFromChildren(child.props.children,child.props.navigationKey,child.type!==Group?groupOptions:groupOptions!=null?[...groupOptions,child.props.screenOptions]:[child.props.screenOptions],typeof child.props.screenLayout==='function'?child.props.screenLayout:groupLayout));return acc;}}throw new Error(`A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${React.isValidElement(child)?`'${typeof child.type==='string'?child.type:child.type?.name}'${child.props!=null&&typeof child.props==='object'&&'name'in child.props&&child.props?.name?` for the screen '${child.props.name}'`:''}`:typeof child==='object'?JSON.stringify(child):`'${String(child)}'`}). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`);},[]);if(false){configs.forEach(config=>{const{name,children,component,getComponent}=config.props;if(children!=null||component!==undefined||getComponent!==undefined){if(children!=null&&component!==undefined){throw new Error(`Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`);}if(children!=null&&getComponent!==undefined){throw new Error(`Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`);}if(component!==undefined&&getComponent!==undefined){throw new Error(`Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`);}if(children!=null&&typeof children!=='function'){throw new Error(`Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`);}if(component!==undefined&&!isValidElementType(component)){throw new Error(`Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`);}if(getComponent!==undefined&&typeof getComponent!=='function'){throw new Error(`Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`);}if(typeof component==='function'){if(component.name==='component'){console.warn(`Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`);}else if(/^[a-z]/.test(component.name)){console.warn(`Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`);}}}else{throw new Error(`Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`);}});}return configs;};export function useNavigationBuilder(createRouter,options){const navigatorKey=useRegisterNavigator();const route=React.useContext(NavigationRouteContext);const{children,layout,screenOptions,screenLayout,screenListeners,UNSTABLE_router}=options,rest=_objectWithoutPropertiesLoose(options,_excluded);const routeConfigs=getRouteConfigsFromChildren(children);const router=useLazyValue(()=>{if(rest.initialRouteName!=null&&routeConfigs.every(config=>config.props.name!==rest.initialRouteName)){throw new Error(`Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`);}const original=createRouter(rest);if(UNSTABLE_router!=null){const overrides=UNSTABLE_router(original);return Object.assign({},original,overrides);}return original;});const screens=routeConfigs.reduce((acc,config)=>{if(config.props.name in acc){throw new Error(`A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`);}acc[config.props.name]=config;return acc;},{});const routeNames=routeConfigs.map(config=>config.props.name);const routeKeyList=routeNames.reduce((acc,curr)=>{acc[curr]=screens[curr].keys.map(key=>key??'').join(':');return acc;},{});const routeParamList=routeNames.reduce((acc,curr)=>{const{initialParams}=screens[curr].props;acc[curr]=initialParams;return acc;},{});const routeGetIdList=routeNames.reduce((acc,curr)=>Object.assign(acc,{[curr]:screens[curr].props.getId}),{});if(!routeNames.length){throw new Error(\"Couldn't find any screens for the navigator. Have you defined any screens as its children?\");}const isStateValid=React.useCallback(state=>state.type===undefined||state.type===router.type,[router.type]);const isStateInitialized=React.useCallback(state=>state!==undefined&&state.stale===false&&isStateValid(state),[isStateValid]);const{state:currentState,getState:getCurrentState,setState:setCurrentState,setKey,getKey,getIsInitial}=React.useContext(NavigationStateContext);const stateCleanedUp=React.useRef(false);const setState=useLatestCallback(state=>{if(stateCleanedUp.current){return;}setCurrentState(state);});const[initializedState,isFirstStateInitialization]=React.useMemo(()=>{const initialRouteParamList=routeNames.reduce((acc,curr)=>{const{initialParams}=screens[curr].props;const initialParamsFromParams=route?.params?.state==null&&route?.params?.initial!==false&&route?.params?.screen===curr?route.params.params:undefined;acc[curr]=initialParams!==undefined||initialParamsFromParams!==undefined?Object.assign({},initialParams,initialParamsFromParams):undefined;return acc;},{});if((currentState===undefined||!isStateValid(currentState))&&route?.params?.state==null&&!(typeof route?.params?.screen==='string'&&route?.params?.initial!==false)){return[router.getInitialState({routeNames,routeParamList:initialRouteParamList,routeGetIdList}),true];}else{let stateFromParams;if(route?.params?.state!=null){stateFromParams=route.params.state;}else if(typeof route?.params?.screen==='string'&&route?.params?.initial!==false){stateFromParams={index:0,routes:[{name:route.params.screen,params:route.params.params,path:route.params.path}]};}return[router.getRehydratedState(stateFromParams??currentState,{routeNames,routeParamList:initialRouteParamList,routeGetIdList}),false];}},[currentState,router,isStateValid]);const previousRouteKeyListRef=React.useRef(routeKeyList);React.useEffect(()=>{previousRouteKeyListRef.current=routeKeyList;});const previousRouteKeyList=previousRouteKeyListRef.current;let state=isStateInitialized(currentState)?currentState:initializedState;let nextState=state;if(!isArrayEqual(state.routeNames,routeNames)||!isRecordEqual(routeKeyList,previousRouteKeyList)){nextState=router.getStateForRouteNamesChange(state,{routeNames,routeParamList,routeGetIdList,routeKeyChanges:Object.keys(routeKeyList).filter(name=>name in previousRouteKeyList&&routeKeyList[name]!==previousRouteKeyList[name])});}const previousNestedParamsRef=React.useRef(route?.params);React.useEffect(()=>{previousNestedParamsRef.current=route?.params;},[route?.params]);if(route?.params){const previousParams=previousNestedParamsRef.current;let action;if(typeof route.params.state==='object'&&route.params.state!=null&&route.params!==previousParams){action=CommonActions.reset(route.params.state);}else if(typeof route.params.screen==='string'&&(route.params.initial===false&&isFirstStateInitialization||route.params!==previousParams)){action=CommonActions.navigate({name:route.params.screen,params:route.params.params,path:route.params.path,pop:route.params.pop});}const updatedState=action?router.getStateForAction(nextState,action,{routeNames,routeParamList,routeGetIdList}):null;nextState=updatedState!==null?router.getRehydratedState(updatedState,{routeNames,routeParamList,routeGetIdList}):nextState;}const shouldUpdate=state!==nextState;useScheduleUpdate(()=>{if(shouldUpdate){setState(nextState);}});state=nextState;React.useEffect(()=>{stateCleanedUp.current=false;setKey(navigatorKey);if(!getIsInitial()){setState(nextState);}return()=>{if(getCurrentState()!==undefined&&getKey()===navigatorKey){setCurrentState(undefined);stateCleanedUp.current=true;}};},[]);const stateRef=React.useRef(state);stateRef.current=state;useIsomorphicLayoutEffect(()=>{stateRef.current=null;});const getState=useLatestCallback(()=>{const currentState=getCurrentState();return deepFreeze(isStateInitialized(currentState)?currentState:initializedState);});const emitter=useEventEmitter(e=>{const routeNames=[];let route;if(e.target){route=state.routes.find(route=>route.key===e.target);if(route?.name){routeNames.push(route.name);}}else{route=state.routes[state.index];routeNames.push(...Object.keys(screens).filter(name=>route?.name===name));}if(route==null){return;}const navigation=descriptors[route.key].navigation;const listeners=[].concat(...[screenListeners,...routeNames.map(name=>{const{listeners}=screens[name].props;return listeners;})].map(listeners=>{const map=typeof listeners==='function'?listeners({route:route,navigation}):listeners;return map?Object.keys(map).filter(type=>type===e.type).map(type=>map?.[type]):undefined;})).filter((cb,i,self)=>cb&&self.lastIndexOf(cb)===i);listeners.forEach(listener=>listener?.(e));});useFocusEvents({state,emitter});React.useEffect(()=>{emitter.emit({type:'state',data:{state}});},[emitter,state]);const{listeners:childListeners,addListener}=useChildListeners();const{keyedListeners,addKeyedListener}=useKeyedChildListeners();const onAction=useOnAction({router,getState,setState,key:route?.key,actionListeners:childListeners.action,beforeRemoveListeners:keyedListeners.beforeRemove,routerConfigOptions:{routeNames,routeParamList,routeGetIdList},emitter});const onRouteFocus=useOnRouteFocus({router,key:route?.key,getState,setState});const navigation=useNavigationHelpers({id:options.id,onAction,getState,emitter,router,stateRef});useFocusedListenersChildrenAdapter({navigation,focusedListeners:childListeners.focus});useOnGetState({getState,getStateListeners:keyedListeners.getState});const{describe,descriptors}=useDescriptors({state,screens,navigation,screenOptions,screenLayout,onAction,getState,setState,onRouteFocus,addListener,addKeyedListener,router,emitter});useCurrentRender({state,navigation,descriptors});const NavigationContent=useComponent(children=>{const element=layout!=null?layout({state,descriptors,navigation,children}):children;return _jsx(NavigationHelpersContext.Provider,{value:navigation,children:_jsx(PreventRemoveProvider,{children:element})});});return{state,navigation,describe,descriptors,NavigationContent};}","map":{"version":3,"names":["CommonActions","React","isValidElementType","useLatestCallback","deepFreeze","Group","isArrayEqual","isRecordEqual","NavigationHelpersContext","NavigationRouteContext","NavigationStateContext","PreventRemoveProvider","Screen","PrivateValueStore","useChildListeners","useComponent","useCurrentRender","useDescriptors","useEventEmitter","useFocusedListenersChildrenAdapter","useFocusEvents","useIsomorphicLayoutEffect","useKeyedChildListeners","useLazyValue","useNavigationHelpers","useOnAction","useOnGetState","useOnRouteFocus","useRegisterNavigator","useScheduleUpdate","jsx","_jsx","isScreen","child","type","isGroup","Fragment","isValidKey","key","undefined","getRouteConfigsFromChildren","children","groupKey","groupOptions","groupLayout","configs","Children","toArray","reduce","acc","isValidElement","props","Error","name","JSON","stringify","navigationKey","push","keys","options","layout","screenOptions","screenLayout","String","forEach","config","component","getComponent","console","warn","test","useNavigationBuilder","createRouter","navigatorKey","route","useContext","screenListeners","UNSTABLE_router","rest","_objectWithoutPropertiesLoose","_excluded","routeConfigs","router","initialRouteName","every","original","overrides","Object","assign","screens","routeNames","map","routeKeyList","curr","join","routeParamList","initialParams","routeGetIdList","getId","length","isStateValid","useCallback","state","isStateInitialized","stale","currentState","getState","getCurrentState","setState","setCurrentState","setKey","getKey","getIsInitial","stateCleanedUp","useRef","current","initializedState","isFirstStateInitialization","useMemo","initialRouteParamList","initialParamsFromParams","params","initial","screen","getInitialState","stateFromParams","index","routes","path","getRehydratedState","previousRouteKeyListRef","useEffect","previousRouteKeyList","nextState","getStateForRouteNamesChange","routeKeyChanges","filter","previousNestedParamsRef","previousParams","action","reset","navigate","pop","updatedState","getStateForAction","shouldUpdate","stateRef","emitter","e","target","find","navigation","descriptors","listeners","concat","cb","i","self","lastIndexOf","listener","emit","data","childListeners","addListener","keyedListeners","addKeyedListener","onAction","actionListeners","beforeRemoveListeners","beforeRemove","routerConfigOptions","onRouteFocus","id","focusedListeners","focus","getStateListeners","describe","NavigationContent","element","Provider","value"],"sources":["C:\\Users\\pablo\\HospitalApp\\node_modules\\@react-navigation\\core\\src\\useNavigationBuilder.tsx"],"sourcesContent":["import {\n  CommonActions,\n  type DefaultRouterOptions,\n  type NavigationAction,\n  type NavigationState,\n  type ParamListBase,\n  type PartialState,\n  type Route,\n  type Router,\n  type RouterConfigOptions,\n  type RouterFactory,\n} from '@react-navigation/routers';\nimport * as React from 'react';\nimport { isValidElementType } from 'react-is';\nimport useLatestCallback from 'use-latest-callback';\n\nimport { deepFreeze } from './deepFreeze';\nimport { Group } from './Group';\nimport { isArrayEqual } from './isArrayEqual';\nimport { isRecordEqual } from './isRecordEqual';\nimport { NavigationHelpersContext } from './NavigationHelpersContext';\nimport { NavigationRouteContext } from './NavigationRouteContext';\nimport { NavigationStateContext } from './NavigationStateContext';\nimport { PreventRemoveProvider } from './PreventRemoveProvider';\nimport { Screen } from './Screen';\nimport {\n  type DefaultNavigatorOptions,\n  type EventMapBase,\n  type EventMapCore,\n  type NavigatorScreenParams,\n  PrivateValueStore,\n  type RouteConfig,\n} from './types';\nimport { useChildListeners } from './useChildListeners';\nimport { useComponent } from './useComponent';\nimport { useCurrentRender } from './useCurrentRender';\nimport { type ScreenConfigWithParent, useDescriptors } from './useDescriptors';\nimport { useEventEmitter } from './useEventEmitter';\nimport { useFocusedListenersChildrenAdapter } from './useFocusedListenersChildrenAdapter';\nimport { useFocusEvents } from './useFocusEvents';\nimport { useIsomorphicLayoutEffect } from './useIsomorphicLayoutEffect';\nimport { useKeyedChildListeners } from './useKeyedChildListeners';\nimport { useLazyValue } from './useLazyValue';\nimport { useNavigationHelpers } from './useNavigationHelpers';\nimport { useOnAction } from './useOnAction';\nimport { useOnGetState } from './useOnGetState';\nimport { useOnRouteFocus } from './useOnRouteFocus';\nimport { useRegisterNavigator } from './useRegisterNavigator';\nimport { useScheduleUpdate } from './useScheduleUpdate';\n\n// This is to make TypeScript compiler happy\n// eslint-disable-next-line @typescript-eslint/no-unused-expressions\nPrivateValueStore;\n\ntype NavigatorRoute = {\n  key: string;\n  params?: NavigatorScreenParams<ParamListBase>;\n};\n\nconst isScreen = (\n  child: React.ReactElement<unknown>\n): child is React.ReactElement<{\n  name?: unknown;\n  navigationKey?: unknown;\n}> => {\n  return child.type === Screen;\n};\n\nconst isGroup = (\n  child: React.ReactElement<unknown>\n): child is React.ReactElement<{\n  navigationKey?: unknown;\n  screenOptions?: unknown;\n  screenLayout?: unknown;\n  children?: unknown;\n}> => {\n  return child.type === React.Fragment || child.type === Group;\n};\n\nconst isValidKey = (key: unknown): key is string | undefined =>\n  key === undefined || (typeof key === 'string' && key !== '');\n\n/**\n * Extract route config object from React children elements.\n *\n * @param children React Elements to extract the config from.\n */\nconst getRouteConfigsFromChildren = <\n  State extends NavigationState,\n  ScreenOptions extends {},\n  EventMap extends EventMapBase,\n>(\n  children: React.ReactNode,\n  groupKey?: string,\n  groupOptions?: ScreenConfigWithParent<\n    State,\n    ScreenOptions,\n    EventMap\n  >['options'],\n  groupLayout?: ScreenConfigWithParent<State, ScreenOptions, EventMap>['layout']\n) => {\n  const configs = React.Children.toArray(children).reduce<\n    ScreenConfigWithParent<State, ScreenOptions, EventMap>[]\n  >((acc, child) => {\n    if (React.isValidElement(child)) {\n      if (isScreen(child)) {\n        // We can only extract the config from `Screen` elements\n        // If something else was rendered, it's probably a bug\n\n        if (typeof child.props !== 'object' || child.props === null) {\n          throw new Error(`Got an invalid element for screen.`);\n        }\n\n        if (typeof child.props.name !== 'string' || child.props.name === '') {\n          throw new Error(\n            `Got an invalid name (${JSON.stringify(\n              child.props.name\n            )}) for the screen. It must be a non-empty string.`\n          );\n        }\n\n        if (\n          child.props.navigationKey !== undefined &&\n          (typeof child.props.navigationKey !== 'string' ||\n            child.props.navigationKey === '')\n        ) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the screen '${\n              child.props.name\n            }'. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        acc.push({\n          keys: [groupKey, child.props.navigationKey],\n          options: groupOptions,\n          layout: groupLayout,\n          props: child.props as RouteConfig<\n            ParamListBase,\n            string,\n            State,\n            ScreenOptions,\n            EventMap,\n            unknown\n          >,\n        });\n\n        return acc;\n      }\n\n      if (isGroup(child)) {\n        if (!isValidKey(child.props.navigationKey)) {\n          throw new Error(\n            `Got an invalid 'navigationKey' prop (${JSON.stringify(\n              child.props.navigationKey\n            )}) for the group. It must be a non-empty string or 'undefined'.`\n          );\n        }\n\n        // When we encounter a fragment or group, we need to dive into its children to extract the configs\n        // This is handy to conditionally define a group of screens\n        acc.push(\n          ...getRouteConfigsFromChildren<State, ScreenOptions, EventMap>(\n            child.props.children as React.ReactNode,\n            child.props.navigationKey,\n            // FIXME\n            // @ts-expect-error: add validation\n            child.type !== Group\n              ? groupOptions\n              : groupOptions != null\n                ? [...groupOptions, child.props.screenOptions]\n                : [child.props.screenOptions],\n            typeof child.props.screenLayout === 'function'\n              ? child.props.screenLayout\n              : groupLayout\n          )\n        );\n\n        return acc;\n      }\n    }\n\n    throw new Error(\n      `A navigator can only contain 'Screen', 'Group' or 'React.Fragment' as its direct children (found ${\n        React.isValidElement(child)\n          ? `'${\n              typeof child.type === 'string' ? child.type : child.type?.name\n            }'${\n              child.props != null &&\n              typeof child.props === 'object' &&\n              'name' in child.props &&\n              child.props?.name\n                ? ` for the screen '${child.props.name}'`\n                : ''\n            }`\n          : typeof child === 'object'\n            ? JSON.stringify(child)\n            : `'${String(child)}'`\n      }). To render this component in the navigator, pass it in the 'component' prop to 'Screen'.`\n    );\n  }, []);\n\n  if (process.env.NODE_ENV !== 'production') {\n    configs.forEach((config) => {\n      const { name, children, component, getComponent } = config.props;\n\n      if (\n        children != null ||\n        component !== undefined ||\n        getComponent !== undefined\n      ) {\n        if (children != null && component !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'getComponent' and 'children' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (component !== undefined && getComponent !== undefined) {\n          throw new Error(\n            `Got both 'component' and 'getComponent' props for the screen '${name}'. You must pass only one of them.`\n          );\n        }\n\n        if (children != null && typeof children !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'children' prop for the screen '${name}'. It must be a function returning a React Element.`\n          );\n        }\n\n        if (component !== undefined && !isValidElementType(component)) {\n          throw new Error(\n            `Got an invalid value for 'component' prop for the screen '${name}'. It must be a valid React Component.`\n          );\n        }\n\n        if (getComponent !== undefined && typeof getComponent !== 'function') {\n          throw new Error(\n            `Got an invalid value for 'getComponent' prop for the screen '${name}'. It must be a function returning a React Component.`\n          );\n        }\n\n        if (typeof component === 'function') {\n          if (component.name === 'component') {\n            // Inline anonymous functions passed in the `component` prop will have the name of the prop\n            // It's relatively safe to assume that it's not a component since it should also have PascalCase name\n            // We won't catch all scenarios here, but this should catch a good chunk of incorrect use.\n            console.warn(\n              `Looks like you're passing an inline function for 'component' prop for the screen '${name}' (e.g. component={() => <SomeComponent />}). Passing an inline function will cause the component state to be lost on re-render and cause perf issues since it's re-created every render. You can pass the function as children to 'Screen' instead to achieve the desired behaviour.`\n            );\n          } else if (/^[a-z]/.test(component.name)) {\n            console.warn(\n              `Got a component with the name '${component.name}' for the screen '${name}'. React Components must start with an uppercase letter. If you're passing a regular function and not a component, pass it as children to 'Screen' instead. Otherwise capitalize your component's name.`\n            );\n          }\n        }\n      } else {\n        throw new Error(\n          `Couldn't find a 'component', 'getComponent' or 'children' prop for the screen '${name}'. This can happen if you passed 'undefined'. You likely forgot to export your component from the file it's defined in, or mixed up default import and named import when importing.`\n        );\n      }\n    });\n  }\n\n  return configs;\n};\n\n/**\n * Hook for building navigators.\n *\n * @param createRouter Factory method which returns router object.\n * @param options Options object containing `children` and additional options for the router.\n * @returns An object containing `state`, `navigation`, `descriptors` objects.\n */\nexport function useNavigationBuilder<\n  State extends NavigationState,\n  RouterOptions extends DefaultRouterOptions,\n  ActionHelpers extends Record<string, (...args: any) => void>,\n  ScreenOptions extends {},\n  EventMap extends Record<string, any>,\n>(\n  createRouter: RouterFactory<State, NavigationAction, RouterOptions>,\n  options: DefaultNavigatorOptions<\n    ParamListBase,\n    string | undefined,\n    State,\n    ScreenOptions,\n    EventMap,\n    any\n  > &\n    RouterOptions\n) {\n  const navigatorKey = useRegisterNavigator();\n\n  const route = React.useContext(NavigationRouteContext) as\n    | NavigatorRoute\n    | undefined;\n\n  const {\n    children,\n    layout,\n    screenOptions,\n    screenLayout,\n    screenListeners,\n    UNSTABLE_router,\n    ...rest\n  } = options;\n\n  const routeConfigs = getRouteConfigsFromChildren<\n    State,\n    ScreenOptions,\n    EventMap\n  >(children);\n\n  const router = useLazyValue<Router<State, any>>(() => {\n    if (\n      rest.initialRouteName != null &&\n      routeConfigs.every(\n        (config) => config.props.name !== rest.initialRouteName\n      )\n    ) {\n      throw new Error(\n        `Couldn't find a screen named '${rest.initialRouteName}' to use as 'initialRouteName'.`\n      );\n    }\n\n    const original = createRouter(rest as unknown as RouterOptions);\n\n    if (UNSTABLE_router != null) {\n      const overrides = UNSTABLE_router(original);\n\n      return {\n        ...original,\n        ...overrides,\n      };\n    }\n\n    return original;\n  });\n\n  const screens = routeConfigs.reduce<\n    Record<string, ScreenConfigWithParent<State, ScreenOptions, EventMap>>\n  >((acc, config) => {\n    if (config.props.name in acc) {\n      throw new Error(\n        `A navigator cannot contain multiple 'Screen' components with the same name (found duplicate screen named '${config.props.name}')`\n      );\n    }\n\n    acc[config.props.name] = config;\n    return acc;\n  }, {});\n\n  const routeNames = routeConfigs.map((config) => config.props.name);\n  const routeKeyList = routeNames.reduce<Record<string, React.Key | undefined>>(\n    (acc, curr) => {\n      acc[curr] = screens[curr].keys.map((key) => key ?? '').join(':');\n      return acc;\n    },\n    {}\n  );\n  const routeParamList = routeNames.reduce<Record<string, object | undefined>>(\n    (acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      acc[curr] = initialParams;\n      return acc;\n    },\n    {}\n  );\n  const routeGetIdList = routeNames.reduce<\n    RouterConfigOptions['routeGetIdList']\n  >(\n    (acc, curr) =>\n      Object.assign(acc, {\n        [curr]: screens[curr].props.getId,\n      }),\n    {}\n  );\n\n  if (!routeNames.length) {\n    throw new Error(\n      \"Couldn't find any screens for the navigator. Have you defined any screens as its children?\"\n    );\n  }\n\n  const isStateValid = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState>) =>\n      state.type === undefined || state.type === router.type,\n    [router.type]\n  );\n\n  const isStateInitialized = React.useCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) =>\n      state !== undefined && state.stale === false && isStateValid(state),\n    [isStateValid]\n  );\n\n  const {\n    state: currentState,\n    getState: getCurrentState,\n    setState: setCurrentState,\n    setKey,\n    getKey,\n    getIsInitial,\n  } = React.useContext(NavigationStateContext);\n\n  const stateCleanedUp = React.useRef(false);\n\n  const setState = useLatestCallback(\n    (state: NavigationState | PartialState<NavigationState> | undefined) => {\n      if (stateCleanedUp.current) {\n        // State might have been already cleaned up due to unmount\n        // We do not want to expose API allowing to override this\n        // This would lead to old data preservation on main navigator unmount\n        return;\n      }\n\n      setCurrentState(state);\n    }\n  );\n\n  const [initializedState, isFirstStateInitialization] = React.useMemo(() => {\n    const initialRouteParamList = routeNames.reduce<\n      Record<string, object | undefined>\n    >((acc, curr) => {\n      const { initialParams } = screens[curr].props;\n      const initialParamsFromParams =\n        route?.params?.state == null &&\n        route?.params?.initial !== false &&\n        route?.params?.screen === curr\n          ? route.params.params\n          : undefined;\n\n      acc[curr] =\n        initialParams !== undefined || initialParamsFromParams !== undefined\n          ? {\n              ...initialParams,\n              ...initialParamsFromParams,\n            }\n          : undefined;\n\n      return acc;\n    }, {});\n\n    // If the current state isn't initialized on first render, we initialize it\n    // We also need to re-initialize it if the state passed from parent was changed (maybe due to reset)\n    // Otherwise assume that the state was provided as initial state\n    // So we need to rehydrate it to make it usable\n    if (\n      (currentState === undefined || !isStateValid(currentState)) &&\n      route?.params?.state == null &&\n      !(\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      )\n    ) {\n      return [\n        router.getInitialState({\n          routeNames,\n          routeParamList: initialRouteParamList,\n          routeGetIdList,\n        }),\n        true,\n      ];\n    } else {\n      let stateFromParams;\n\n      if (route?.params?.state != null) {\n        stateFromParams = route.params.state;\n      } else if (\n        typeof route?.params?.screen === 'string' &&\n        route?.params?.initial !== false\n      ) {\n        stateFromParams = {\n          index: 0,\n          routes: [\n            {\n              name: route.params.screen,\n              params: route.params.params,\n              path: route.params.path,\n            },\n          ],\n        };\n      }\n\n      return [\n        router.getRehydratedState(\n          (stateFromParams ?? currentState) as PartialState<State>,\n          {\n            routeNames,\n            routeParamList: initialRouteParamList,\n            routeGetIdList,\n          }\n        ),\n        false,\n      ];\n    }\n    // We explicitly don't include routeNames, route.params etc. in the dep list\n    // below. We want to avoid forcing a new state to be calculated in those cases\n    // Instead, we handle changes to these in the nextState code below. Note\n    // that some changes to routeConfigs are explicitly ignored, such as changes\n    // to initialParams\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [currentState, router, isStateValid]);\n\n  const previousRouteKeyListRef = React.useRef(routeKeyList);\n\n  React.useEffect(() => {\n    previousRouteKeyListRef.current = routeKeyList;\n  });\n\n  const previousRouteKeyList = previousRouteKeyListRef.current;\n\n  let state =\n    // If the state isn't initialized, or stale, use the state we initialized instead\n    // The state won't update until there's a change needed in the state we have initialized locally\n    // So it'll be `undefined` or stale until the first navigation event happens\n    isStateInitialized(currentState)\n      ? (currentState as State)\n      : (initializedState as State);\n\n  let nextState: State = state;\n\n  if (\n    !isArrayEqual(state.routeNames, routeNames) ||\n    !isRecordEqual(routeKeyList, previousRouteKeyList)\n  ) {\n    // When the list of route names change, the router should handle it to remove invalid routes\n    nextState = router.getStateForRouteNamesChange(state, {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n      routeKeyChanges: Object.keys(routeKeyList).filter(\n        (name) =>\n          name in previousRouteKeyList &&\n          routeKeyList[name] !== previousRouteKeyList[name]\n      ),\n    });\n  }\n\n  const previousNestedParamsRef = React.useRef(route?.params);\n\n  React.useEffect(() => {\n    previousNestedParamsRef.current = route?.params;\n  }, [route?.params]);\n\n  if (route?.params) {\n    const previousParams = previousNestedParamsRef.current;\n\n    let action: CommonActions.Action | undefined;\n\n    if (\n      typeof route.params.state === 'object' &&\n      route.params.state != null &&\n      route.params !== previousParams\n    ) {\n      // If the route was updated with new state, we should reset to it\n      action = CommonActions.reset(route.params.state);\n    } else if (\n      typeof route.params.screen === 'string' &&\n      ((route.params.initial === false && isFirstStateInitialization) ||\n        route.params !== previousParams)\n    ) {\n      // If the route was updated with new screen name and/or params, we should navigate there\n      action = CommonActions.navigate({\n        name: route.params.screen,\n        params: route.params.params,\n        path: route.params.path,\n        pop: route.params.pop,\n      });\n    }\n\n    // The update should be limited to current navigator only, so we call the router manually\n    const updatedState = action\n      ? router.getStateForAction(nextState, action, {\n          routeNames,\n          routeParamList,\n          routeGetIdList,\n        })\n      : null;\n\n    nextState =\n      updatedState !== null\n        ? router.getRehydratedState(updatedState, {\n            routeNames,\n            routeParamList,\n            routeGetIdList,\n          })\n        : nextState;\n  }\n\n  const shouldUpdate = state !== nextState;\n\n  useScheduleUpdate(() => {\n    if (shouldUpdate) {\n      // If the state needs to be updated, we'll schedule an update\n      setState(nextState);\n    }\n  });\n\n  // The up-to-date state will come in next render, but we don't need to wait for it\n  // We can't use the outdated state since the screens have changed, which will cause error due to mismatched config\n  // So we override the state object we return to use the latest state as soon as possible\n  state = nextState;\n\n  React.useEffect(() => {\n    // In strict mode, React will double-invoke effects.\n    // So we need to reset the flag if component was not unmounted\n    stateCleanedUp.current = false;\n\n    setKey(navigatorKey);\n\n    if (!getIsInitial()) {\n      // If it's not initial render, we need to update the state\n      // This will make sure that our container gets notifier of state changes due to new mounts\n      // This is necessary for proper screen tracking, URL updates etc.\n      setState(nextState);\n    }\n\n    return () => {\n      // We need to clean up state for this navigator on unmount\n      if (getCurrentState() !== undefined && getKey() === navigatorKey) {\n        setCurrentState(undefined);\n        stateCleanedUp.current = true;\n      }\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  // In some cases (e.g. route names change), internal state might have changed\n  // But it hasn't been committed yet, so hasn't propagated to the sync external store\n  // During this time, we need to return the internal state in `getState`\n  // Otherwise it can result in inconsistent state during render in children\n  // To avoid this, we use a ref for render phase, and immediately clear it on commit\n  const stateRef = React.useRef<State | null>(state);\n\n  stateRef.current = state;\n\n  useIsomorphicLayoutEffect(() => {\n    stateRef.current = null;\n  });\n\n  const getState = useLatestCallback((): State => {\n    const currentState = getCurrentState();\n\n    return deepFreeze(\n      (isStateInitialized(currentState)\n        ? currentState\n        : initializedState) as State\n    );\n  });\n\n  const emitter = useEventEmitter<EventMapCore<State>>((e) => {\n    const routeNames = [];\n\n    let route: Route<string> | undefined;\n\n    if (e.target) {\n      route = state.routes.find((route) => route.key === e.target);\n\n      if (route?.name) {\n        routeNames.push(route.name);\n      }\n    } else {\n      route = state.routes[state.index];\n      routeNames.push(\n        ...Object.keys(screens).filter((name) => route?.name === name)\n      );\n    }\n\n    if (route == null) {\n      return;\n    }\n\n    const navigation = descriptors[route.key].navigation;\n\n    const listeners = ([] as (((e: any) => void) | undefined)[])\n      .concat(\n        // Get an array of listeners for all screens + common listeners on navigator\n        ...[\n          screenListeners,\n          ...routeNames.map((name) => {\n            const { listeners } = screens[name].props;\n            return listeners;\n          }),\n        ].map((listeners) => {\n          const map =\n            typeof listeners === 'function'\n              ? listeners({ route: route as any, navigation })\n              : listeners;\n\n          return map\n            ? Object.keys(map)\n                .filter((type) => type === e.type)\n                .map((type) => map?.[type])\n            : undefined;\n        })\n      )\n      // We don't want same listener to be called multiple times for same event\n      // So we remove any duplicate functions from the array\n      .filter((cb, i, self) => cb && self.lastIndexOf(cb) === i);\n\n    listeners.forEach((listener) => listener?.(e));\n  });\n\n  useFocusEvents({ state, emitter });\n\n  React.useEffect(() => {\n    emitter.emit({ type: 'state', data: { state } });\n  }, [emitter, state]);\n\n  const { listeners: childListeners, addListener } = useChildListeners();\n\n  const { keyedListeners, addKeyedListener } = useKeyedChildListeners();\n\n  const onAction = useOnAction({\n    router,\n    getState,\n    setState,\n    key: route?.key,\n    actionListeners: childListeners.action,\n    beforeRemoveListeners: keyedListeners.beforeRemove,\n    routerConfigOptions: {\n      routeNames,\n      routeParamList,\n      routeGetIdList,\n    },\n    emitter,\n  });\n\n  const onRouteFocus = useOnRouteFocus({\n    router,\n    key: route?.key,\n    getState,\n    setState,\n  });\n\n  const navigation = useNavigationHelpers<\n    State,\n    ActionHelpers,\n    NavigationAction,\n    EventMap\n  >({\n    id: options.id,\n    onAction,\n    getState,\n    emitter,\n    router,\n    stateRef,\n  });\n\n  useFocusedListenersChildrenAdapter({\n    navigation,\n    focusedListeners: childListeners.focus,\n  });\n\n  useOnGetState({\n    getState,\n    getStateListeners: keyedListeners.getState,\n  });\n\n  const { describe, descriptors } = useDescriptors<\n    State,\n    ActionHelpers,\n    ScreenOptions,\n    EventMap\n  >({\n    state,\n    screens,\n    navigation,\n    screenOptions,\n    screenLayout,\n    onAction,\n    getState,\n    setState,\n    onRouteFocus,\n    addListener,\n    addKeyedListener,\n    router,\n    // @ts-expect-error: this should have both core and custom events, but too much work right now\n    emitter,\n  });\n\n  useCurrentRender({\n    state,\n    navigation,\n    descriptors,\n  });\n\n  const NavigationContent = useComponent((children: React.ReactNode) => {\n    const element =\n      layout != null\n        ? layout({\n            state,\n            descriptors,\n            navigation,\n            children,\n          })\n        : children;\n\n    return (\n      <NavigationHelpersContext.Provider value={navigation}>\n        <PreventRemoveProvider>{element}</PreventRemoveProvider>\n      </NavigationHelpersContext.Provider>\n    );\n  });\n\n  return {\n    state,\n    navigation,\n    describe,\n    descriptors,\n    NavigationContent,\n  };\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{"hasCjsExports":false},"sourceType":"module","externalDependencies":[]}